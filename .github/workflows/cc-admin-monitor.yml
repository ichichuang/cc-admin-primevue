name: 🛡️ cc-admin 框架保护监控

on:
  schedule:
    # 每周一上午9点 (UTC+8 = UTC+0的1点)
    - cron: '0 1 * * 1'
  workflow_dispatch:
    inputs:
      search_intensity:
        description: '搜索强度'
        required: false
        default: 'standard'
        type: choice
        options:
          - light
          - standard
          - intensive

env:
  # cc-admin 框架特征
  FRAMEWORK_NAME: 'cc-admin'
  AUTHOR: 'chichuang'
  GITHUB_USERNAME: 'ichichuang'
  REPO_NAME: 'cc-admin'

  # 独特技术栈组合
  TECH_STACK_SIGNATURE: 'Vue 3.5 TypeScript 5 UnoCSS 0.66 pnpm 10.12.4'

jobs:
  cc-admin-protection:
    runs-on: ubuntu-latest
    name: 🔍 cc-admin 框架监控

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔍 检测版权标识抄袭
        id: copyright_check
        run: |
          echo '🔍 检测版权标识抄袭...'

          # cc-admin 特有的版权标识 - 更精确的搜索关键词
          COPYRIGHT_SIGNATURES=(
            '@copyright Copyright (c) 2025 chichuang'
            'cc-admin 企业级后台管理框架'
            '本文件为 chichuang 原创'
            '禁止擅自删除署名或用于商业用途'
            'chichuang cc-admin'
            'cc-admin-FRAMEWORK-CHICHUANG-2025'
            'chichuang 原创'
            # 移除容易误报的关键词
            # 'cc-admin v1.0' - 这个关键词太通用，容易误报
          )

          FOUND_VIOLATIONS=''

          for signature in "${COPYRIGHT_SIGNATURES[@]}"; do
            echo "🔍 搜索版权标识: $signature"

            # 使用GitHub API搜索
            encoded_query=$(echo "$signature -user:$GITHUB_USERNAME -repo:$REPO_NAME" | sed 's/ /%20/g' | sed 's/:/%3A/g')

            response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/search/code?q=$encoded_query&per_page=10")

            total_count=$(echo "$response" | jq -r '.total_count // 0')

            if [ "$total_count" -gt 0 ]; then
              echo "⚠️ 发现版权侵犯: $total_count 个匹配项"

              # 提取仓库信息
              echo "$response" | jq -r '.items[]? | "🚨 版权侵犯: \(.repository.full_name) - 文件: \(.name) - \(.html_url)"' >> copyright_violations.txt
              FOUND_VIOLATIONS='true'
            fi

            sleep 2
          done

          echo "found_violations=$FOUND_VIOLATIONS" >> $GITHUB_OUTPUT

      - name: 🏗️ 检测文件结构抄袭
        id: structure_check
        run: |
          echo '🏗️ 检测文件结构抄袭...'

          # cc-admin 独特的文件结构模式 - 更精确的组合
          STRUCTURE_PATTERNS=(
            'src/stores/modules index.ts chichuang'
            'src/api/modules index.ts chichuang'
            'src/router/modules index.ts chichuang'
            'unocss/rules unocss/shortcuts chichuang'
            'scripts/ chichuang cc-admin'
            'src/hooks/modules chichuang'
            'src/common/modules chichuang'
            'src/locales/modules chichuang'
            'src/mock/modules chichuang'
            # 添加更独特的组合
            'cc-admin 企业级后台管理框架 chichuang'
            'Vue 3.5+ TypeScript 5+ Vite 7+ chichuang'
            'UnoCSS 0.66 企业级后台 chichuang'
          )

          STRUCTURE_VIOLATIONS=''

          for pattern in "${STRUCTURE_PATTERNS[@]}"; do
            echo "🔍 搜索结构模式: $pattern"

            encoded_query=$(echo "$pattern -user:$GITHUB_USERNAME" | sed 's/ /%20/g')

            response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/search/code?q=$encoded_query&per_page=5")

            total_count=$(echo "$response" | jq -r '.total_count // 0')

            if [ "$total_count" -gt 0 ]; then
              echo "⚠️ 发现结构相似: $total_count 个匹配项"
              echo "$response" | jq -r '.items[]? | "📁 结构相似: \(.repository.full_name) - \(.html_url)"' >> structure_similarities.txt
              STRUCTURE_VIOLATIONS='true'
            fi

            sleep 2
          done

          echo "structure_violations=$STRUCTURE_VIOLATIONS" >> $GITHUB_OUTPUT

      - name: ⚡ 检测技术栈抄袭
        id: techstack_check
        run: |
          echo '⚡ 检测技术栈抄袭...'

          # cc-admin 特有的技术栈组合 - 更精确的查询
          TECHSTACK_QUERIES=(
            'Vue 3.5 TypeScript 5 UnoCSS Vite chichuang'
            'Pinia 3 Alova 3 Vue I18n 10 chichuang'
            'pnpm 10.12.4 Vue3 admin chichuang'
            'UnoCSS 0.66 企业级后台 chichuang'
            'Vue 3.5+ TypeScript 5+ Vite 7+ chichuang'
            'cc-admin 企业级后台管理框架 chichuang'
            # 添加更独特的组合
            'chichuang cc-admin 企业级后台管理框架'
            'chichuang Vue 3.5 TypeScript 5 UnoCSS'
            'chichuang Pinia 3 Alova 3 Vue I18n 10'
          )

          TECHSTACK_MATCHES=''

          for query in "${TECHSTACK_QUERIES[@]}"; do
            echo "🔍 搜索技术栈: $query"

            encoded_query=$(echo "$query -user:$GITHUB_USERNAME" | sed 's/ /%20/g')

            response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/search/repositories?q=$encoded_query&per_page=5")

            total_count=$(echo "$response" | jq -r '.total_count // 0')

            if [ "$total_count" -gt 0 ]; then
              echo "📊 发现相似技术栈: $total_count 个仓库"
              echo "$response" | jq -r '.items[]? | "🔧 技术栈相似: \(.full_name) - Stars: \(.stargazers_count) - \(.html_url)"' >> techstack_matches.txt
              TECHSTACK_MATCHES='true'
            fi

            sleep 2
          done

          echo "techstack_matches=$TECHSTACK_MATCHES" >> $GITHUB_OUTPUT

      - name: 📊 分析 Fork 和 Star 情况
        id: analyze_engagement
        run: |
          echo '📊 分析 Fork 和 Star 情况...'

          # 获取仓库统计信息
          repo_info=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$GITHUB_USERNAME/$REPO_NAME")

          star_count=$(echo "$repo_info" | jq -r '.stargazers_count // 0')
          fork_count=$(echo "$repo_info" | jq -r '.forks_count // 0')

          echo "⭐ 当前 Stars: $star_count"
          echo "🍴 当前 Forks: $fork_count"

          # 获取最近的 forks
          forks_response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$GITHUB_USERNAME/$REPO_NAME/forks?sort=created&direction=desc&per_page=5")

          echo "$forks_response" | jq -r '.[]? | "🍴 最近Fork: \(.full_name) - 创建: \(.created_at) - \(.html_url)"' > recent_forks.txt

          echo "star_count=$star_count" >> $GITHUB_OUTPUT
          echo "fork_count=$fork_count" >> $GITHUB_OUTPUT

      - name: 🎯 生成 cc-admin 保护报告
        run: |
          echo '🎯 生成 cc-admin 保护报告...'

          # 创建详细的监控报告
          cat > cc_admin_protection_report.md << EOF
          # 🛡️ cc-admin 框架保护监控报告

          **监控时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          **框架名称**: cc-admin 企业级后台管理框架
          **作者**: chichuang
          **仓库**: $GITHUB_USERNAME/$REPO_NAME

          ## 📈 项目统计
          - ⭐ **Stars**: ${{ steps.analyze_engagement.outputs.star_count }}
          - 🍴 **Forks**: ${{ steps.analyze_engagement.outputs.fork_count }}

          ## 🚨 版权侵犯检测
          $(if [ -f "copyright_violations.txt" ] && [ -s "copyright_violations.txt" ]; then
            echo "**⚠️ 发现版权侵犯行为:**"
            cat copyright_violations.txt
          else
            echo "✅ 未发现版权侵犯行为"
          fi)

          ## 🏗️ 文件结构相似度
          $(if [ -f "structure_similarities.txt" ] && [ -s "structure_similarities.txt" ]; then
            echo "**📁 发现结构相似项目:**"
            cat structure_similarities.txt
          else
            echo "✅ 未发现结构抄袭"
          fi)

          ## ⚡ 技术栈相似度
          $(if [ -f "techstack_matches.txt" ] && [ -s "techstack_matches.txt" ]; then
            echo "**🔧 发现相似技术栈项目:**"
            cat techstack_matches.txt
          else
            echo "✅ 技术栈组合独特"
          fi)

          ## 🍴 最近 Fork 情况
          $(if [ -f "recent_forks.txt" ]; then cat recent_forks.txt; else echo "暂无新的Fork"; fi)

          ## 🛡️ 保护建议
          $(if [[ "${{ steps.copyright_check.outputs.found_violations }}" == "true" ]]; then
            echo "### 🚨 紧急措施"
            echo "- 📧 立即联系侵权方要求删除或标注原作者"
            echo "- 📝 考虑发送 DMCA 删除通知"
            echo "- 🔒 在代码中添加更多版权保护措施"
            echo ""
          fi)

          ### 📋 常规建议
          - 🔍 定期监控代码使用情况
          - 📄 完善开源协议和使用条款
          - 🏷️ 在关键文件中增加更多标识符
          - 📱 考虑设置更频繁的监控频率

          ---
          *cc-admin 框架保护系统 v1.0 - 由 GitHub Actions 自动生成*
          EOF

      - name: 🚨 创建严重问题 Issue
        if: steps.copyright_check.outputs.found_violations == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let reportContent = '';
            if (fs.existsSync('cc_admin_protection_report.md')) {
              reportContent = fs.readFileSync('cc_admin_protection_report.md', 'utf8');
            }

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 cc-admin 版权侵犯警报 - ${new Date().toISOString().split('T')[0]}`,
              body: reportContent,
              labels: ['urgent', 'copyright', 'security', 'protection']
            });

      - name: 📧 发送邮件通知
        if: steps.copyright_check.outputs.found_violations == 'true' || steps.structure_check.outputs.structure_violations == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: '🚨 cc-admin 框架保护警报 - 发现可疑抄袭行为'
          body: file://cc_admin_protection_report.md
          to: ${{ secrets.NOTIFICATION_EMAIL }}

      - name: 📝 保存监控结果
        uses: actions/upload-artifact@v4
        with:
          name: cc-admin-protection-report-${{ github.run_number }}
          path: |
            cc_admin_protection_report.md
            copyright_violations.txt
            structure_similarities.txt
            techstack_matches.txt
            recent_forks.txt
          retention-days: 90
