# cc-admin-primevue 项目开发规范与约定

## ⚠️ 重要：包管理器配置
**强制使用 pnpm 作为包管理器！**
- 项目配置: `"packageManager": "pnpm@10.12.4"`
- Node.js版本要求: `>=24.3.0`
- pnpm版本要求: `>=8.0.0`
- 运行命令: `pnpm dev` / `pnpm build` / `pnpm install`
- **严禁使用 npm 或 yarn 命令**
- AI助手必须使用 pnpm 命令，不得使用 npm 命令
- 配置位置:
  - `.cursor/settings.json`: `"npm.packageManager": "pnpm"`
  - `.vscode/settings.json`: `"npm.packageManager": "pnpm"`
  - `package.json`: `"packageManager": "pnpm@10.12.4"`

## 🚫 AI助手开发限制规则

### 📝 开发重点
- **专注功能实现**：优先完成核心功能代码，确保代码质量和性能
- **实现完整业务逻辑**：确保每个功能模块完整可用
- **遵循最佳实践**：使用 TypeScript 和 Vue 3 最佳实践
- **性能优化**：注意内存使用和渲染性能
- **兼容性**：确保在不同设备和浏览器上的兼容性

### ❌ 开发阶段不需要的工作
- **不创建文档**：不创建 `docs/` 目录下的文档
- **不编写说明**：不编写 README 说明
- **不添加示例注释**：不添加详细的使用说明和示例注释
- **不创建教程**：不创建示例和教程
- **不自动生成示例文件**：不创建任何示例文件
- **不自动生成文档文件**：不创建任何文档文件

### ✅ 开发阶段需要保留的
- **必要注释**：保留必要的代码注释（解释复杂逻辑）
- **JSDoc注释**：保留函数和类的 JSDoc 注释
- **清晰命名**：使用清晰的英文文件命名
- **规范遵循**：遵循项目现有的命名规范

### 🎯 当前开发重点
1. 完善 rem 适配系统的边界逻辑
2. 优化配置管理的一致性
3. 实现其他核心功能模块
4. 确保代码质量和性能

### 📚 文档策略
等框架完全完善后，会单独编写完整的文档体系，包括：
- 框架架构文档
- API 参考文档
- 使用教程和最佳实践
- 示例代码库

这样可以确保开发效率，避免在开发过程中分散精力编写文档。

> **重要**: 在开发阶段，AI助手应该专注于功能实现，不要主动创建文档或编写使用说明。

## 🏗️ 技术栈
- **前端框架**: Vue 3.5+ (Composition API)
- **语言**: TypeScript 5+ (严格模式)
- **构建工具**: Vite 7+
- **状态管理**: Pinia + pinia-plugin-persistedstate
- **路由**: Vue Router 4+
- **HTTP客户端**: Alova
- **样式方案**: UnoCSS (原子化CSS + Tailwind兼容)
- **代码规范**: ESLint 9+ + Prettier + TypeScript ESLint
- **提交规范**: Commitizen + Commitlint (Conventional Commits)
- **包管理**: pnpm 10.12.4

## 📁 统一目录结构
项目采用 `index.ts + modules/` 模式实现自动化模块导入：
```
src/
├── api/
│   ├── index.ts           # 自动导入 modules/ 下的所有API模块
│   └── modules/           # API模块目录
├── stores/
│   ├── index.ts           # 自动导入 modules/ 下的所有Store模块
│   ├── modules/           # Store模块目录
│   └── types/             # Store类型定义
├── router/
│   ├── index.ts           # 自动导入 modules/ 下的所有路由模块
│   ├── modules/           # 路由模块目录
│   ├── types.ts           # 路由类型定义
│   └── utils.ts           # 路由工具函数
├── hooks/
│   └── index.ts           # 自动导入 hooks 模块
├── common/
│   ├── index.ts           # 自动导入公共模块
│   └── modules/           # 公共模块目录
├── layouts/               # 布局组件
├── views/                 # 页面组件
└── utils/                 # 工具函数
```

## 🎨 样式系统 (UnoCSS)
- **原子化CSS**: 使用UnoCSS，兼容Tailwind语法
- **主题系统**: 支持深色/浅色模式 + 动态主题颜色
- **图标系统**: @iconify/json 图标集合
- **预设配置**:
  - `@unocss/preset-uno`: 基础样式
  - `@unocss/preset-attributify`: 属性化模式
  - `@unocss/preset-icons`: 图标预设
  - `@unocss/preset-typography`: 排版预设
- **配置文件**: `uno.config.ts`
- **CSS变量**: 动态主题颜色绑定到CSS变量系统

## 📝 命名约定
### 文件命名
- **Vue页面**: kebab-case (`user-list.vue`)
- **Vue组件**: PascalCase (`UserCard.vue`)
- **TypeScript文件**: camelCase (`userService.ts`)
- **目录**: kebab-case (`user-management/`)
- **配置文件**: kebab-case 或 点分隔 (`uno.config.ts`, `.prettierrc.json`)

### 代码命名
- **变量/函数**: camelCase (`getUserList`)
- **常量**: SCREAMING_SNAKE_CASE (`MAX_RETRY_COUNT`)
- **接口/类型**: PascalCase (`UserInfo`, `ApiResponse`)
- **组件名**: 多词组合 PascalCase (`UserCard`, `DataTable`)
- **事件处理**: handle前缀 (`handleSubmit`, `handleClick`)
- **Composable**: use前缀 (`useUserStore`, `useTheme`)

## 🧩 Vue 3 开发规范
### Composition API
- **优先使用** Composition API 而非 Options API
- **script setup** 语法糖优先
- **响应式**: 使用 `ref`、`reactive`、`computed`、`watch`
- **生命周期**: 使用 `onMounted`、`onUnmounted` 等组合式生命周期

### 组件设计
- **单文件组件**: `.vue` 文件包含 template、script、style
- **Props类型**: 必须定义 TypeScript 类型
- **事件定义**: 使用 `defineEmits` 定义事件类型
- **插槽使用**: 合理使用具名插槽和作用域插槽
- **组件通信**: Props down, Events up 原则

### TypeScript 集成
- **严格模式**: 启用 `strict: true`
- **类型导入**: 使用 `import type` 导入纯类型
- **接口定义**: 业务数据类型必须定义接口
- **泛型使用**: 合理使用泛型提高代码复用性

## 🔧 开发工具配置
### ESLint + Prettier
- **ESLint**: 代码质量检查，使用 `@eslint/js` 和 `typescript-eslint`
- **Prettier**: 代码格式化，统一代码风格
- **Vue规则**: 使用 `eslint-plugin-vue` 检查Vue组件
- **保存时**: 自动修复ESLint错误和格式化代码
- **Git Hooks**: 提交前自动检查代码质量

### VS Code / Cursor 配置
- **扩展推荐**: Volar, ESLint, Prettier, UnoCSS
- **智能提示**: TypeScript、Vue、UnoCSS类名提示
- **文件嵌套**: 配置文件嵌套显示，保持目录整洁
- **格式化**: 保存时自动格式化，统一团队代码风格

## 🚀 常用开发命令
```bash
# 开发服务器
pnpm dev

# 构建项目
pnpm build

# 构建分析
pnpm build:analyze

# 代码检查
pnpm lint              # ESLint检查和修复
pnpm type-check        # TypeScript类型检查
pnpm naming-check      # 命名规范检查
pnpm code-check        # 综合代码检查

# 代码格式化
pnpm format            # Prettier格式化
pnpm code-fix          # ESLint修复 + 格式化

# Git提交
pnpm commit            # 使用Commitizen规范提交
```

## 🎯 开发最佳实践
### 性能优化
- **按需导入**: 组件、工具函数按需导入
- **代码分割**: 路由级别的代码分割
- **图片优化**: 使用合适格式和尺寸的图片
- **Bundle分析**: 使用 `pnpm build:analyze` 分析打包结果

### 可维护性
- **模块化设计**: 功能模块独立，低耦合高内聚
- **类型安全**: 充分利用TypeScript类型系统
- **错误处理**: 合理的错误边界和异常处理
- **文档注释**: 关键函数和复杂逻辑添加注释

### 团队协作
- **代码审查**: 提交前代码自检，PR时团队审查
- **提交规范**: 使用Conventional Commits格式
- **分支管理**: 功能分支开发，合并前测试
- **依赖管理**: 及时更新依赖，避免安全漏洞

## 🔒 强制执行规则
1. **包管理器**: 必须使用pnpm，禁止npm/yarn
2. **代码规范**: Git提交前强制检查ESLint、TypeScript、命名规范
3. **类型安全**: 所有公共API和组件Props必须定义类型
4. **目录结构**: 新增模块必须遵循既定的目录结构
5. **提交信息**: 必须使用Commitizen生成规范的提交信息
6. **不生成文档**: 开发阶段不创建任何文档文件
7. **不生成示例**: 开发阶段不创建任何示例文件

## 📘 项目文档编写规范
> 适用于自动生成高质量、结构清晰、内容统一的项目文档，服务于前端开发、维护与交付场景

### 📂 文档结构与层次
#### ✅ 标准结构
```
├── 封面页
├── 目录
├── 引言
├── 项目概述
├── 安装与配置
├── 开发指南
├── 部署与运维
└── 附录
```

#### 🧩 各部分详细要求
- **封面页**: 项目名称、版本号、文档生成日期、作者/维护人
- **目录**: 自动生成，包括章节标题及页码/跳转链接
- **引言**: 项目背景、目标、适用范围
- **项目概述**: 项目架构图、核心功能列表、主要技术栈
- **安装与配置**: 开发环境准备、依赖安装、配置文件说明
- **开发指南**: 目录结构说明、模块划分、接口定义、代码规范、使用示例
- **部署与运维**: 部署方式、环境变量、构建命令、日志与监控说明
- **附录**: 术语表、参考文档链接、常见问题（FAQ）

### ✍️ 内容规范
#### 语言风格
- 使用 **简洁专业** 的语言，避免口语化表达
- 确保技术术语在全文中保持一致
- 提供 **完整清晰** 的代码示例：

```ts
// ✅ 正确示例
router.addRoute({
  path: '/dashboard',
  meta: { requiresAuth: true },
  component: () => import('@/views/dashboard.vue')
})
```

#### 图表使用
- 适时插入流程图、架构图或时序图，辅助解释复杂内容
- 建议使用 mermaid 或 plantuml 支持自动生成
- 项目架构、组件通信、数据流图优先使用图表展示

### 🧱 模块化文档设计
#### 模块结构标准
```
模块名：用户管理
├── 概述：提供用户增删改查能力，支持角色绑定
├── 功能点：注册、登录、信息修改、用户禁用
├── API接口：见下方表格
```

#### 接口文档表格格式
| 方法 | URL | 参数说明 | 返回值说明 |
|------|-----|----------|-----------|
| GET  | /api/user/:id | `id`: 用户ID | 用户信息对象 |
| POST | /api/user/create | `name`, `email` | 创建结果对象 |

#### 错误码标准格式
| 错误码 | 描述 | 建议处理方式 |
|--------|------|-------------|
| 1001 | 用户名已存在 | 前端提示并禁用提交按钮 |
| 2002 | Token失效 | 重定向至登录页面 |

### 🎨 格式与排版规范
- **字体**: 正文 `Arial 11pt`，一级标题 `Arial Bold 16pt`，二级标题 `14pt`
- **行距**: 段落使用 `1.5倍` 行距，段与段之间保留空行
- **页眉/页脚**:
  - 页眉：显示文档名称（居左）
  - 页脚：显示 `第 X 页 / 共 Y 页`（居中）与版权信息（居右）
- **样式建议**: 使用主题色（如 `#3B82F6`）标注高亮词，表格斑马纹增强可读性

### ⚙️ 自动化支持
#### 模板化结构
- 建议将规范文档模板统一保存于 `docs/templates/structure.md`
- 确保所有项目生成结构一致

#### 动态内容提取
- 接口描述从 `src/api/**/*.ts` 自动提取函数签名和注释
- 组件说明从 `src/components/**` 的 JSDoc 注释中提取

#### 版本控制
- 文档版本使用语义化版本号，与项目同步（如 `v1.2.3`）
- 使用 `docs/CHANGELOG.md` 记录文档变更历史

### 🎯 文档生成目标
✅ **逻辑清晰**: 统一的文档结构、章节清晰、便于查阅与维护
✅ **表达明确**: 简明扼要、代码注释辅助理解
✅ **模块独立**: 各功能模块分离，易于更新
✅ **高效产出**: 结合模板 + 自动提取，显著减少重复劳动

### 📋 文档生成强制规则
1. **结构统一**: 所有项目文档必须遵循标准结构
2. **内容完整**: 每个模块必须包含概述、功能点、API接口
3. **格式规范**: 严格按照排版规范执行
4. **自动化优先**: 优先使用模板和自动提取机制
5. **版本同步**: 文档版本必须与项目版本保持一致

> **重要**: 当接到编写项目文档的任务时，必须严格按照此规范执行，确保文档质量与团队协作效率的提升。
