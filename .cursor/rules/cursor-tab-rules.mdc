---
description: Cursor Tab 自动编码规则和智能补全配置
globs: ['**/*.{ts,tsx,vue,js,jsx}']
alwaysApply: true
---

# Cursor Tab 自动编码规则

此文件为 Cursor 编辑器提供智能的自动编码规则，确保生成的代码严格遵循项目规范。

## 自动补全规则

### 变量声明自动补全

```typescript
// 输入: "const user"
// 自动补全: "const userName = "

// 输入: "const api"
// 自动补全: "const apiResponse = "

// 输入: "const is"
// 自动补全: "const isLoading = "
```

### 函数声明自动补全

```typescript
// 输入: "function get"
// 自动补全: "function getUserInfo() {}"

// 输入: "const handle"
// 自动补全: "const handleSubmit = () => {}"

// 输入: "const fetch"
// 自动补全: "const fetchUserData = async () => {}"
```

### 类型声明自动补全

```typescript
// 输入: "interface User"
// 自动补全: "interface UserInfo {}"

// 输入: "type Api"
// 自动补全: "type ApiResponse<T> = {}"

// 输入: "enum Status"
// 自动补全: "enum UserStatus { Active, Inactive }"
```

## 智能导入规则

### 自动导入检测

```typescript
// 输入: "useUserStore"
// 自动添加: "import { useUserStore } from '@/stores'"

// 输入: "formatDate"
// 自动添加: "import { formatDate } from '@/utils'"

// 输入: "getUserApi"
// 自动添加: "import { getUserApi } from '@!/index'"

// 输入: "deepClone"
// 自动添加: "import { deepClone } from '@#/index'"
```

### 导入优先级

1. **路径别名优先**: 始终使用 `@/*`, `@!/*`, `@#/*`
2. **统一入口优先**: 优先从模块的 `index.ts` 导入
3. **具名导入优先**: 避免默认导入整个模块

## Vue 组件自动生成

### 组件模板生成

```vue
<!-- 输入: "create user component" -->
<!-- 自动生成: -->
<template lang="pug">
.user-component
  .user-header
    .user-title {{ user?.name }}
  .user-content
    .user-info
      .info-item
        .label 邮箱
        .value {{ user?.email }}
</template>

<script setup lang="ts">
import { ref, computed } from 'vue'
import type { UserInfo } from '@/types'

interface Props {
  userId: string
  showDetails?: boolean
}

const props = withDefaults(defineProps<Props>(), {
  showDetails: false,
})

const user = ref<UserInfo | null>(null)
const loading = ref(false)

const fetchUser = async () => {
  loading.value = true
  try {
    // 实现获取用户逻辑
  } catch (error) {
    console.error('获取用户失败:', error)
  } finally {
    loading.value = false
  }
}

onMounted(() => {
  fetchUser()
})
</script>
```

### Composables 自动生成

```typescript
// 输入: "create user composable"
// 自动生成:
const useUser = () => {
  const user = ref<UserInfo | null>(null)
  const loading = ref(false)
  const error = ref<string | null>(null)

  const fetchUser = async (userId: string) => {
    loading.value = true
    error.value = null
    try {
      const response = await getUserApi(userId)
      user.value = response.data
    } catch (err) {
      error.value = err instanceof Error ? err.message : '获取用户失败'
      throw err
    } finally {
      loading.value = false
    }
  }

  const updateUser = async (data: Partial<UserInfo>) => {
    if (!user.value) return

    loading.value = true
    try {
      const response = await updateUserApi(user.value.id, data)
      user.value = { ...user.value, ...response.data }
    } catch (err) {
      error.value = err instanceof Error ? err.message : '更新用户失败'
      throw err
    } finally {
      loading.value = false
    }
  }

  return {
    user: readonly(user),
    loading: readonly(loading),
    error: readonly(error),
    fetchUser,
    updateUser,
  }
}
```

## API 函数自动生成

### CRUD 操作模板

```typescript
// 输入: "create user api"
// 自动生成:
export const getUserList = async (params?: GetUserListParams): Promise<ApiResponse<UserInfo[]>> => {
  try {
    const response = await httpRequest.get('/users', { params })
    return response.data
  } catch (error) {
    console.error('获取用户列表失败:', error)
    throw error
  }
}

export const getUserById = async (id: string): Promise<ApiResponse<UserInfo>> => {
  try {
    const response = await httpRequest.get(`/users/${id}`)
    return response.data
  } catch (error) {
    console.error('获取用户详情失败:', error)
    throw error
  }
}

export const createUser = async (data: CreateUserData): Promise<ApiResponse<UserInfo>> => {
  try {
    const response = await httpRequest.post('/users', data)
    return response.data
  } catch (error) {
    console.error('创建用户失败:', error)
    throw error
  }
}

export const updateUser = async (
  id: string,
  data: UpdateUserData
): Promise<ApiResponse<UserInfo>> => {
  try {
    const response = await httpRequest.put(`/users/${id}`, data)
    return response.data
  } catch (error) {
    console.error('更新用户失败:', error)
    throw error
  }
}

export const deleteUser = async (id: string): Promise<ApiResponse<void>> => {
  try {
    const response = await httpRequest.delete(`/users/${id}`)
    return response.data
  } catch (error) {
    console.error('删除用户失败:', error)
    throw error
  }
}
```

## Store 自动生成

### Pinia Store 模板

```typescript
// 输入: "create user store"
// 自动生成:
export const useUserStore = defineStore('user', () => {
  const user = ref<UserInfo | null>(null)
  const userList = ref<UserInfo[]>([])
  const loading = ref(false)
  const error = ref<string | null>(null)

  const isLoggedIn = computed(() => !!user.value)
  const userCount = computed(() => userList.value.length)

  const fetchUser = async (userId: string) => {
    loading.value = true
    error.value = null
    try {
      const response = await getUserApi(userId)
      user.value = response.data
    } catch (err) {
      error.value = err instanceof Error ? err.message : '获取用户失败'
      throw err
    } finally {
      loading.value = false
    }
  }

  const fetchUserList = async (params?: GetUserListParams) => {
    loading.value = true
    error.value = null
    try {
      const response = await getUserListApi(params)
      userList.value = response.data
    } catch (err) {
      error.value = err instanceof Error ? err.message : '获取用户列表失败'
      throw err
    } finally {
      loading.value = false
    }
  }

  const updateUser = async (data: Partial<UserInfo>) => {
    if (!user.value) return

    loading.value = true
    try {
      const response = await updateUserApi(user.value.id, data)
      user.value = { ...user.value, ...response.data }

      // 更新列表中的用户信息
      const index = userList.value.findIndex(u => u.id === user.value!.id)
      if (index !== -1) {
        userList.value[index] = user.value
      }
    } catch (err) {
      error.value = err instanceof Error ? err.message : '更新用户失败'
      throw err
    } finally {
      loading.value = false
    }
  }

  const clearUser = () => {
    user.value = null
    userList.value = []
    error.value = null
  }

  return {
    user: readonly(user),
    userList: readonly(userList),
    loading: readonly(loading),
    error: readonly(error),
    isLoggedIn,
    userCount,
    fetchUser,
    fetchUserList,
    updateUser,
    clearUser,
  }
})
```

## 类型定义自动生成

### 接口自动生成

```typescript
// 输入: "create user interface"
// 自动生成:
export interface UserInfo {
  id: string
  name: string
  email: string
  avatar?: string
  status: UserStatus
  createdAt: string
  updatedAt: string
}

export interface CreateUserData {
  name: string
  email: string
  avatar?: string
}

export interface UpdateUserData {
  name?: string
  email?: string
  avatar?: string
  status?: UserStatus
}

export interface GetUserListParams {
  page?: number
  limit?: number
  search?: string
  status?: UserStatus
}

export enum UserStatus {
  Active = 'active',
  Inactive = 'inactive',
  Pending = 'pending',
}

export type UserRole = 'admin' | 'user' | 'guest'
```

## 错误处理自动生成

### 错误处理模板

```typescript
// 输入: "create error handler"
// 自动生成:
export const handleApiError = (error: unknown): string => {
  if (error instanceof Error) {
    return error.message
  }

  if (typeof error === 'string') {
    return error
  }

  if (error && typeof error === 'object' && 'message' in error) {
    return String(error.message)
  }

  return '未知错误'
}

export const createErrorHandler = (context: string) => {
  return (error: unknown) => {
    const message = handleApiError(error)
    console.error(`${context}失败:`, message)
    throw new Error(message)
  }
}
```

## 测试代码自动生成

### 单元测试模板

```typescript
// 输入: "create user test"
// 自动生成:
import { describe, it, expect, vi, beforeEach } from 'vitest'
import { useUser } from '@/hooks/useUser'

describe('useUser', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  it('should fetch user data successfully', async () => {
    const { user, loading, fetchUser } = useUser()

    expect(loading.value).toBe(false)
    expect(user.value).toBeNull()

    await fetchUser('user-id')

    expect(loading.value).toBe(false)
    expect(user.value).toBeDefined()
  })

  it('should handle fetch error', async () => {
    const { error, fetchUser } = useUser()

    await expect(fetchUser('invalid-id')).rejects.toThrow()
    expect(error.value).toBeDefined()
  })
})
```

## 代码片段模板

### 常用代码片段

```typescript
// 输入: "vcomp" -> Vue Composition API 组件
// 输入: "vstore" -> Vue Store
// 输入: "vapi" -> Vue API 函数
// 输入: "vtype" -> Vue 类型定义
// 输入: "vtest" -> Vue 测试
```

## 智能重构规则

### 自动重构建议

1. **变量重命名**: 自动建议符合规范的命名
2. **导入优化**: 自动使用路径别名
3. **类型优化**: 自动添加类型注解
4. **错误处理**: 自动添加 try-catch
5. **性能优化**: 自动使用 readonly、shallowRef 等

### 代码质量检查

1. **命名规范检查**: 确保符合 camelCase/PascalCase
2. **导入路径检查**: 确保使用路径别名
3. **类型安全检查**: 确保类型定义完整
4. **错误处理检查**: 确保异常处理完善

---

**注意**: 所有自动生成的代码都必须严格遵循项目的 TypeScript 和 ESLint 配置，确保代码质量和一致性。
