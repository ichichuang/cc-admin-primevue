---
alwaysApply: true
---

# CC-Admin 项目导入导出智能规范配置

此文件为 Cursor 编辑器提供导入导出相关的智能规范指导，基于项目的模块化架构和路径别名配置。

## 路径别名配置

项目配置的路径别名：

```typescript
{
  "@/*": ["./src/*"],      // 主路径别名
  "@!/*": ["./src/api/*"], // API 模块别名
  "@#/*": ["./src/common/*"] // 通用模块别名
}
```

## 模块化架构识别

### 标准模块结构模式

Cursor 应识别以下标准模块结构：

```
src/{module}/
├── index.ts           # 统一导出入口
└── modules/
    ├── feature1.ts    # 具体功能模块
    ├── feature2.ts    # 具体功能模块
    └── ...            # 更多功能模块
```

### 自动扫描模块目录

需要自动扫描并支持智能导入的模块目录：

1. **通用模块** (`src/common/`)
   - 路径别名: `@#/*`
   - 导入方式: `import { xxx } from '@#/index'`

2. **API 模块** (`src/api/`)
   - 路径别名: `@!/*`
   - 导入方式: `import { xxx } from '@!/index'`

3. **工具模块** (`src/utils/`)
   - 路径别名: `@/*`
   - 导入方式: `import { xxx } from '@/utils'`

4. **状态管理** (`src/stores/`)
   - 路径别名: `@/*`
   - 导入方式: `import { xxx } from '@/stores'`

5. **组合函数** (`src/hooks/`)
   - 路径别名: `@/*`
   - 导入方式: `import { xxx } from '@/hooks'`

6. **常量配置** (`src/constants/`)
   - 路径别名: `@/*`
   - 导入方式: `import { xxx } from '@/constants'`

## 智能导入规则

### 模块导入优先级

1. **统一入口优先** - 优先使用模块的 index.ts 统一入口

   ```typescript
   // ✅ 推荐：通过统一入口导入
   import { isProd } from '@/utils'
   import { toKebabCase } from '@#/index'
   import { getUserApi } from '@!/index'

   // ❌ 避免：直接导入具体模块文件
   import { isProd } from '@/utils/modules/env'
   import { toKebabCase } from '@/common/modules/lodash'
   ```

2. **路径别名优先** - 始终使用配置的路径别名

   ```typescript
   // ✅ 推荐：使用路径别名
   import { formatDate } from '@/utils'
   import { httpRequest } from '@!/index'
   import { deepClone } from '@#/index'

   // ❌ 避免：使用相对路径
   import { formatDate } from '../../../utils'
   import { httpRequest } from '../../api'
   ```

### 自动导入建议模式

当用户输入函数名时，Cursor 应智能提示导入：

1. **函数名智能匹配**

   ```typescript
   // 用户输入: isProd
   // 自动建议添加: import { isProd } from '@/utils'

   // 用户输入: toKebabCase
   // 自动建议添加: import { toKebabCase } from '@#/index'

   // 用户输入: getUserList
   // 自动建议添加: import { getUserList } from '@!/index'
   ```

2. **多模块同名处理**
   ```typescript
   // 当存在同名导出时，提供明确的选择
   // 用户输入: formatDate
   // 选项1: import { formatDate } from '@/utils'     (来自 utils/modules/date.ts)
   // 选项2: import { formatDate } from '@#/index'    (来自 common/modules/date.ts)
   ```

## 组件导入规则

### 自动组件导入

由于配置了 `components.d.ts` 自动导入插件：

1. **全局组件** - 无需手动导入

   ```vue
   <template>
     <!-- ✅ 自动导入，无需 import 语句 -->
     <UserProfile />
     <DataTable />
   </template>
   ```

2. **本地组件** - 需要手动导入

   ```vue
   <template>
     <LocalComponent />
   </template>

   <script setup lang="ts">
   // ✅ 本地组件需要手动导入
   import LocalComponent from './components/LocalComponent.vue'
   </script>
   ```

### 组件导入智能提示

1. **全局组件检测**
   - 当使用未定义的组件标签时，检查是否为已注册的全局组件
   - 如果是全局组件，不提示导入
   - 如果不是，提示可能的导入路径

2. **本地组件路径智能补全**
   ```vue
   // 输入: import LocalComp // 自动补全: import LocalComponent from
   './components/LocalComponent.vue'
   ```

## 导出模式识别

### 统一导出模式

识别并支持项目的统一导出模式：

```typescript
// src/{module}/index.ts 标准模式
import { autoImportModulesSync } from '@/utils'

// ⚠️ 注意：import.meta.glob 不支持路径别名，必须使用相对路径
const modules = import.meta.glob('./modules/**/*.ts', { eager: true })
const imported = autoImportModulesSync(modules)

// 具名导出 (推荐用于智能提示)
export * from './modules/feature1'
export * from './modules/feature2'

// 默认导出 (用于批量导入)
export default imported
```

### import.meta.glob 特殊规则

由于 Vite 的限制，`import.meta.glob` 不支持路径别名：

```typescript
// ❌ 错误：路径别名不生效
const modules = import.meta.glob('@/modules/**/*.ts', { eager: true })
const apiModules = import.meta.glob('@!/modules/**/*.ts', { eager: true })

// ✅ 正确：必须使用相对路径
const modules = import.meta.glob('./modules/**/*.ts', { eager: true })
const subModules = import.meta.glob('../common/modules/**/*.ts', { eager: true })
```

### 导出智能提示

1. **新模块添加时**

   ```typescript
   // 在 modules/ 下创建新文件时，自动建议在 index.ts 中添加：
   export * from './modules/newFeature'
   ```

2. **导出冲突检测**
   ```typescript
   // 检测不同模块中的同名导出，提示潜在冲突
   // modules/utils1.ts: export function helper() {}
   // modules/utils2.ts: export function helper() {}
   // 提示: 检测到同名导出 'helper'，建议重命名或使用命名空间
   ```

## 特殊导入模式

### Composables 导入

```typescript
// ✅ 推荐：Composables 使用 use 前缀
import { useUserData, useLocalStorage } from '@/hooks'

// ✅ 推荐：解构导入具体功能
const { user, updateUser } = useUserData()
```

### Store 导入

```typescript
// ✅ 推荐：Store 导入模式
import { useUserStore, useAppStore } from '@/stores'

// ✅ 推荐：在组件中使用
const userStore = useUserStore()
const { user } = storeToRefs(userStore)
```

### 类型导入

```typescript
// ✅ 推荐：类型导入使用 type 关键字
import type { UserInfo, ApiResponse } from '@/types'
import type { CommonModules } from '@#/index'

// ✅ 推荐：混合导入时分离类型和值
import { getUserList, type UserListParams } from '@!/index'
```

## 动态导入识别

### 懒加载组件

```typescript
// ✅ 推荐：路由懒加载
const UserManagement = () => import('@/views/user-management.vue')

// ✅ 推荐：动态组件导入
const DynamicComponent = defineAsyncComponent(() => import('@/components/DynamicComponent.vue'))
```

### 动态模块导入

```typescript
// ✅ 推荐：条件模块导入
const devTools = await import('@/utils/devTools')

// ✅ 推荐：配置基础的动态导入
const config = await import(`@/config/${env}.ts`)
```

## 导入优化建议

### Tree Shaking 优化

1. **具名导入优先**

   ```typescript
   // ✅ 推荐：具名导入，支持 Tree Shaking
   import { debounce, throttle } from '@/utils'

   // ❌ 避免：默认导入整个模块
   import utils from '@/utils'
   ```

2. **按需导入第三方库**

   ```typescript
   // ✅ 推荐：按需导入
   import { format } from 'date-fns'
   import { cloneDeep } from 'lodash-es'

   // ❌ 避免：导入整个库
   import * as dateFns from 'date-fns'
   import _ from 'lodash'
   ```

### 循环依赖检测

1. **自动检测循环依赖**
   - 当创建可能导致循环依赖的导入时发出警告
   - 建议重构方案或使用依赖注入

2. **模块间依赖可视化**
   - 提供模块依赖关系的智能提示
   - 建议合理的模块拆分方案

## 代码生成模式

### 新模块创建模板

当创建新的功能模块时，自动生成标准结构：

```typescript
// src/newModule/index.ts
import { autoImportModulesSync } from '@/utils'

const modules = import.meta.glob('./modules/**/*.ts', { eager: true })
const imported = autoImportModulesSync(modules)

// TODO: 添加具名导出
// export * from './modules/feature'

export default imported
export type NewModuleModules = typeof imported
```

### 导入语句自动整理

1. **导入分组和排序**

   ```typescript
   // 第三方库导入
   import { reactive, ref } from 'vue'
   import { debounce } from 'lodash-es'

   // 项目内部导入 (按路径别名分组)
   import { formatDate } from '@/utils'
   import { getUserApi } from '@!/index'
   import { deepClone } from '@#/index'

   // 相对路径导入
   import LocalComponent from './LocalComponent.vue'
   ```

2. **未使用导入清理**
   - 自动检测未使用的导入并建议清理
   - 提供批量清理未使用导入的功能

## 错误处理和修复建议

### 常见导入错误自动修复

1. **路径错误修复**

   ```typescript
   // 检测到错误路径时自动建议修复
   // ❌ import { isProd } from './utils/env'
   // ✅ 建议修复为: import { isProd } from '@/utils'
   ```

2. **别名使用建议**

   ```typescript
   // 检测到可以使用别名的情况
   // ❌ import { httpRequest } from '../../../api'
   // ✅ 建议修复为: import { httpRequest } from '@!/index'
   ```

3. **导入冲突解决**
   ```typescript
   // 当存在命名冲突时，建议使用别名导入
   import { format as dateFormat } from '@/utils'
   import { format as stringFormat } from '@#/index'
   ```

---

**注意**: 此配置基于项目的模块化架构和路径别名配置，Cursor 会根据实际的文件结构和导出内容提供智能的导入建议和自动补全功能。
