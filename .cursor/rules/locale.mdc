---
alwaysApply: true
---

# CC-Admin 项目国际化(i18n)智能规范配置

此文件为 Cursor 编辑器提供智能的国际化(i18n)规范指导，能够自动识别和适应项目的多语言文件结构。

## 项目多语言架构

### 目录结构模式识别

Cursor 应自动识别以下目录结构模式：

```
src/locales/
├── lang/           # 语言包文件 (自动扫描所有 *.ts 文件)
├── modules/        # 模块配置文件 (自动扫描所有 *.ts 文件)
└── types/modules/  # 类型定义文件 (自动扫描所有 *.ts 文件)
```

### 智能文件扫描规则

1. **语言文件自动识别** (`/src/locales/lang/`)
   - 扫描所有匹配 `[a-z]{2}-[A-Z]{2}.ts` 格式的文件
   - 例如：`zh-CN.ts`, `en-US.ts`, `zh-TW.ts`, `ja-JP.ts`, `ko-KR.ts`
   - 支持未来添加任何新的语言代码文件

2. **模块文件自动识别** (`/src/locales/modules/`)
   - 扫描所有 `*.ts` 文件作为多语言模块
   - 例如：`auth.ts`, `common.ts`, `user.ts`, `product.ts`, `order.ts`
   - 新增模块文件会自动被识别和支持

3. **类型定义自动识别** (`/src/locales/types/modules/`)
   - 扫描所有 `*.ts` 文件作为模块类型定义
   - 与 modules 目录保持一致的文件名映射
   - 提供 TypeScript 智能提示支持

## 动态键名智能提示

### 智能键名补全机制

Cursor 应基于实际文件内容提供智能补全：

1. **顶级模块自动识别**
   - 当输入 `t('` 时，自动扫描 `/src/locales/modules/` 下的所有文件
   - 提示所有存在的模块名称，如：`auth.`, `common.`, `user.`, `product.`

2. **嵌套键名智能解析**
   - 当输入 `t('auth.` 时，读取 `auth.ts` 文件内容
   - 解析并提示所有可用的子键名
   - 支持多层嵌套结构的智能提示

3. **实时文件监听**
   - 当模块文件被修改时，自动更新智能提示内容
   - 新增或删除键名会立即反映在代码补全中

## 语言包结构模式

### 标准语言包结构

每个语言文件应遵循以下导入模式：

```typescript
// 语言包文件模式 (如 en-US.ts)
import { authEnUS } from '@/locales/modules/auth'
import { commonEnUS } from '@/locales/modules/common'
import { userEnUS } from '@/locales/modules/user'
// ... 自动扫描并导入所有模块

export const enUS = {
  auth: authEnUS,
  common: commonEnUS,
  user: userEnUS,
  // ... 自动匹配所有模块
}

export default enUS
```

### 模块文件结构模式

每个模块文件应提供多语言导出：

```typescript
// 模块文件模式 (如 auth.ts)
export const authZhCN = {
  login: {
    title: '用户登录',
    // ...
  },
}

export const authEnUS = {
  login: {
    title: 'User Login',
    // ...
  },
}

// ... 支持所有语言的导出
```

## 智能代码补全规则

### T 函数智能补全

1. **模块级补全**

   ```typescript
   t('auth.') // 自动提示 auth 模块下的所有键
   t('common.') // 自动提示 common 模块下的所有键
   t('user.') // 自动提示 user 模块下的所有键
   ```

2. **多层级补全**

   ```typescript
   t('auth.login.') // 提示 login 下的所有子键
   t('common.form.validation.') // 提示 validation 下的所有子键
   ```

3. **参数智能补全**
   ```typescript
   t('welcome.message', { name: '', age: 0 }) // 根据模板自动提示参数
   ```

### 类型安全智能提示

1. **基于 TypeScript 类型的补全**
   - 读取 `/src/locales/types/modules/` 下的类型定义
   - 提供强类型的键名补全
   - 参数类型检查和补全

2. **模块导入智能提示**
   ```typescript
   import { useLocale } from '@/composables/useLocale'
   const { t } = useLocale() // 自动提供类型化的 t 函数
   ```

## 文件关联和同步

### 模块文件一致性检查

1. **三重文件同步检查**
   - `modules/xxx.ts` (实现文件)
   - `types/modules/xxx.ts` (类型定义)
   - `lang/` 下的所有语言文件中的对应导入

2. **缺失文件智能提示**
   - 当创建新模块时，提示创建对应的类型文件
   - 当添加新语言时，提示更新所有模块的对应语言导出

### 自动文件生成建议

1. **新模块创建时**

   ```
   创建 modules/product.ts 时，自动建议：
   1. 创建 types/modules/product.ts
   2. 在所有语言文件中添加 product 模块导入
   ```

2. **新语言添加时**
   ```
   创建 lang/ja-JP.ts 时，自动建议：
   1. 在所有 modules/*.ts 文件中添加对应的 jaJP 导出
   2. 更新 types 定义以支持新语言
   ```

## 国际化最佳实践智能提示

### 代码模式识别

1. **硬编码文本检测**

   ```typescript
   // ❌ 检测到硬编码，建议使用 t() 函数
   const title = '用户登录'

   // ✅ 自动建议修改为
   const title = t('auth.login.title')
   ```

2. **字符串拼接检测**

   ```typescript
   // ❌ 检测到字符串拼接，建议使用参数化翻译
   const message = 'Welcome, ' + userName

   // ✅ 自动建议修改为
   const message = t('welcome.message', { name: userName })
   ```

### Vue 模板智能提示

1. **模板中的文本检测**

   ```vue
   <!-- ❌ 检测到硬编码文本 -->
   <h1>用户管理</h1>

   <!-- ✅ 自动建议修改为 -->
   <h1>{{ t('user.management.title') }}</h1>
   ```

2. **属性中的文本检测**

   ```vue
   <!-- ❌ 检测到硬编码属性 -->
   <input placeholder="请输入用户名" />

   <!-- ✅ 自动建议修改为 -->
   <input :placeholder="t('auth.login.usernamePlaceholder')" />
   ```

## 扩展性配置

### 自定义扫描路径

可以通过配置自定义扫描路径：

```json
{
  "i18n.scanPaths": {
    "languages": "src/locales/lang/**/*.ts",
    "modules": "src/locales/modules/**/*.ts",
    "types": "src/locales/types/**/*.ts"
  }
}
```

### 自定义命名模式

```json
{
  "i18n.patterns": {
    "languageFile": "[a-z]{2}-[A-Z]{2}.ts",
    "moduleExport": "{module}{Language}",
    "typeInterface": "{Module}Messages"
  }
}
```

## 性能优化

### 智能缓存机制

1. **文件内容缓存**
   - 缓存已解析的模块结构
   - 仅在文件修改时重新解析

2. **增量更新**
   - 仅更新修改的模块提示
   - 避免全量重新扫描

### 懒加载提示

1. **按需解析**
   - 仅在需要时解析具体模块内容
   - 提高大型项目的响应速度

## 错误检测和修复建议

### 常见问题自动检测

1. **缺失翻译键**
   - 自动检测某个语言缺失特定键名
   - 提供自动补全建议

2. **键名不一致**
   - 检测不同语言文件中的键名结构差异
   - 提供同步修复建议

3. **未使用的翻译键**
   - 扫描代码使用情况
   - 标识未使用的翻译键

---

**注意**: 此配置启用了智能扫描和动态适应功能，Cursor 会根据项目实际的文件结构自动调整提示内容，无需手动维护固定的模块列表。
