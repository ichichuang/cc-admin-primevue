---
alwaysApply: true
---

# CC-Admin 项目命名规范配置

此文件为 Cursor 编辑器提供命名规范指导，确保代码提示和自动完成符合项目规范。

## 文件命名规范

### Vue 文件命名

- **全局组件** (`/src/components/`): 使用 **PascalCase**
  - ✅ `UserProfile.vue`, `DataTable.vue`, `FormModal.vue`
  - ❌ `user-profile.vue`, `dataTable.vue`

- **页面文件** (`/src/views/`): 使用 **kebab-case**
  - ✅ `user-list.vue`, `product-detail.vue`, `order-management.vue`
  - ❌ `UserList.vue`, `productDetail.vue`

- **页面内组件** (`/src/views/**/components/`): 使用 **PascalCase**
  - ✅ `UserCard.vue`, `ProductForm.vue`, `OrderItem.vue`
  - ❌ `user-card.vue`, `productForm.vue`

- **子页面文件** (`/src/views/**/views/`): 使用 **kebab-case**
  - ✅ `user-edit.vue`, `product-add.vue`
  - ❌ `UserEdit.vue`, `productAdd.vue`

### TypeScript/JavaScript 文件命名

- **功能模块文件** (`/src/api/`, `/src/hooks/`, `/src/stores/`, `/src/utils/`, `/src/common/`): 使用 **camelCase**
  - ✅ `userApi.ts`, `useUserData.ts`, `userStore.ts`, `formatUtils.ts`
  - ❌ `user-api.ts`, `UserApi.ts`, `use-user-data.ts`

- **其他脚本文件**: 使用 **kebab-case**
  - ✅ `main.ts`, `vite-env.d.ts`, `app-config.ts`
  - ❌ `appConfig.ts`, `ViteEnv.d.ts`

### 目录命名规范

- **功能模块目录** (`/src/api/`, `/src/hooks/`, `/src/stores/`, `/src/utils/`, `/src/common/`): 使用 **camelCase**
  - ✅ `userManagement/`, `dataProcessing/`, `fileUpload/`
  - ❌ `user-management/`, `DataProcessing/`

- **其他目录**: 使用 **kebab-case**
  - ✅ `components/`, `views/`, `assets/`, `style-guide/`
  - ❌ `Components/`, `styleGuide/`

## 代码命名规范

### 变量命名

- **普通变量**: 使用 **camelCase**
  - ✅ `const userName = 'admin'`
  - ✅ `const userList = []`
  - ❌ `const user_name = 'admin'`, `const UserName = 'admin'`

- **常量**: 使用 **SCREAMING_SNAKE_CASE**
  - ✅ `const API_BASE_URL = 'https://api.example.com'`
  - ✅ `const MAX_FILE_SIZE = 1024`
  - ❌ `const apiBaseUrl = 'https://api.example.com'`

### 函数命名

- **函数**: 使用 **camelCase**
  - ✅ `function getUserInfo() {}`, `const handleSubmit = () => {}`
  - ❌ `function GetUserInfo() {}`, `const handle_submit = () => {}`

### 类型/接口命名

- **接口**: 使用 **PascalCase**
  - ✅ `interface UserInfo {}`, `interface ApiResponse<T> {}`
  - ❌ `interface userInfo {}`, `interface apiResponse<T> {}`

- **类型别名**: 使用 **PascalCase**
  - ✅ `type UserRole = 'admin' | 'user'`
  - ❌ `type userRole = 'admin' | 'user'`

- **枚举**: 使用 **PascalCase**
  - ✅ `enum UserStatus { Active, Inactive }`
  - ❌ `enum userStatus { active, inactive }`

### Vue 组件相关命名

- **组件名**: 使用 **PascalCase**
  - ✅ `<UserProfile />`, `<DataTable />`
  - ❌ `<user-profile />`, `<dataTable />`

- **Props**: 使用 **camelCase**
  - ✅ `defineProps<{ userName: string; isActive: boolean }>()`
  - ❌ `defineProps<{ user_name: string; is_active: boolean }>()`

- **事件**: 使用 **kebab-case**
  - ✅ `@user-select="handleUserSelect"`, `@data-update="handleDataUpdate"`
  - ❌ `@userSelect="handleUserSelect"`, `@dataUpdate="handleDataUpdate"`

- **属性**: 使用 **kebab-case**
  - ✅ `<input :max-length="50" :is-disabled="true" />`
  - ❌ `<input :maxLength="50" :isDisabled="true" />`

## Composables 命名

- **Use 前缀**: 使用 **camelCase** 且以 `use` 开头
  - ✅ `useUserData()`, `useApiRequest()`, `useLocalStorage()`
  - ❌ `UseUserData()`, `getUserData()`, `user_data_composable()`

## Store 命名

- **Store 文件**: 使用 **camelCase** 且以 `Store` 结尾
  - ✅ `userStore.ts`, `appConfigStore.ts`
  - ❌ `user-store.ts`, `UserStore.ts`

- **Store 函数**: 使用 **camelCase**
  - ✅ `const useUserStore = defineStore('user', () => {})`
  - ❌ `const UseUserStore = defineStore('user', () => {})`

## API 相关命名

- **API 文件**: 使用 **camelCase** 且以 `Api` 结尾
  - ✅ `userApi.ts`, `productApi.ts`, `orderManagementApi.ts`
  - ❌ `user-api.ts`, `UserAPI.ts`

- **API 函数**: 使用 **camelCase** 且包含 HTTP 动词
  - ✅ `getUserList()`, `createUser()`, `updateUserInfo()`, `deleteUser()`
  - ❌ `get_user_list()`, `CreateUser()`, `UserDelete()`

## 特殊情况处理

- **私有成员**: 允许以 `_` 开头
  - ✅ `const _privateVar = 'internal'`, `function _helperFunction() {}`

- **Vue 特殊属性**: 允许特殊命名格式
  - ✅ `ref=""`, `v-model=""`, `@click=""`

- **第三方库属性**: 保持原有命名格式
  - ✅ `Content-Type`, `Access-Control-Allow-Origin`

- **数字属性名**: 允许纯数字
  - ✅ `{ '0': 'zero', '1': 'one' }`

## 国际化文件命名

- **语言文件**: 使用 **语言代码-国家代码** 格式
  - ✅ `en-US.ts`, `zh-CN.ts`, `ja-JP.ts`
  - ❌ `english.ts`, `chinese.ts`

## 测试文件命名

- **测试文件**: 使用 **kebab-case** 且包含 `.test.`
  - ✅ `user-service.test.ts`, `data-utils.test.ts`
  - ❌ `UserService.test.ts`, `dataUtils.test.ts`

## 自动修正建议

当检测到不符合规范的命名时，Cursor 应提供以下自动修正建议：

1. **文件重命名建议**:
   - `user-profile.vue` → `UserProfile.vue` (全局组件)
   - `UserList.vue` → `user-list.vue` (页面文件)
   - `user-api.ts` → `userApi.ts` (API 文件)

2. **变量重命名建议**:
   - `user_name` → `userName`
   - `UserName` → `userName`
   - `api_base_url` → `API_BASE_URL` (常量)

3. **函数重命名建议**:
   - `GetUserInfo` → `getUserInfo`
   - `handle_submit` → `handleSubmit`

## 配置优先级

1. 项目特定规范 (此文件)
2. ESLint 配置规则
3. TypeScript 编译器检查
4. Vue 官方推荐规范

---

# CC-Admin 项目命名规范配置

此文件为 Cursor 编辑器提供命名规范指导，确保代码提示和自动完成符合项目规范。

## 文件命名规范

### Vue 文件命名

- **全局组件** (`/src/components/`): 使用 **PascalCase**
  - ✅ `UserProfile.vue`, `DataTable.vue`, `FormModal.vue`
  - ❌ `user-profile.vue`, `dataTable.vue`

- **页面文件** (`/src/views/`): 使用 **kebab-case**
  - ✅ `user-list.vue`, `product-detail.vue`, `order-management.vue`
  - ❌ `UserList.vue`, `productDetail.vue`

- **页面内组件** (`/src/views/**/components/`): 使用 **PascalCase**
  - ✅ `UserCard.vue`, `ProductForm.vue`, `OrderItem.vue`
  - ❌ `user-card.vue`, `productForm.vue`

- **子页面文件** (`/src/views/**/views/`): 使用 **kebab-case**
  - ✅ `user-edit.vue`, `product-add.vue`
  - ❌ `UserEdit.vue`, `productAdd.vue`

### TypeScript/JavaScript 文件命名

- **功能模块文件** (`/src/api/`, `/src/hooks/`, `/src/stores/`, `/src/utils/`, `/src/common/`): 使用 **camelCase**
  - ✅ `userApi.ts`, `useUserData.ts`, `userStore.ts`, `formatUtils.ts`
  - ❌ `user-api.ts`, `UserApi.ts`, `use-user-data.ts`

- **其他脚本文件**: 使用 **kebab-case**
  - ✅ `main.ts`, `vite-env.d.ts`, `app-config.ts`
  - ❌ `appConfig.ts`, `ViteEnv.d.ts`

### 目录命名规范

- **功能模块目录** (`/src/api/`, `/src/hooks/`, `/src/stores/`, `/src/utils/`, `/src/common/`): 使用 **camelCase**
  - ✅ `userManagement/`, `dataProcessing/`, `fileUpload/`
  - ❌ `user-management/`, `DataProcessing/`

- **其他目录**: 使用 **kebab-case**
  - ✅ `components/`, `views/`, `assets/`, `style-guide/`
  - ❌ `Components/`, `styleGuide/`

## 代码命名规范

### 变量命名

- **普通变量**: 使用 **camelCase**
  - ✅ `const userName = 'admin'`
  - ✅ `const userList = []`
  - ❌ `const user_name = 'admin'`, `const UserName = 'admin'`

- **常量**: 使用 **SCREAMING_SNAKE_CASE**
  - ✅ `const API_BASE_URL = 'https://api.example.com'`
  - ✅ `const MAX_FILE_SIZE = 1024`
  - ❌ `const apiBaseUrl = 'https://api.example.com'`

### 函数命名

- **函数**: 使用 **camelCase**
  - ✅ `function getUserInfo() {}`, `const handleSubmit = () => {}`
  - ❌ `function GetUserInfo() {}`, `const handle_submit = () => {}`

### 类型/接口命名

- **接口**: 使用 **PascalCase**
  - ✅ `interface UserInfo {}`, `interface ApiResponse<T> {}`
  - ❌ `interface userInfo {}`, `interface apiResponse<T> {}`

- **类型别名**: 使用 **PascalCase**
  - ✅ `type UserRole = 'admin' | 'user'`
  - ❌ `type userRole = 'admin' | 'user'`

- **枚举**: 使用 **PascalCase**
  - ✅ `enum UserStatus { Active, Inactive }`
  - ❌ `enum userStatus { active, inactive }`

### Vue 组件相关命名

- **组件名**: 使用 **PascalCase**
  - ✅ `<UserProfile />`, `<DataTable />`
  - ❌ `<user-profile />`, `<dataTable />`

- **Props**: 使用 **camelCase**
  - ✅ `defineProps<{ userName: string; isActive: boolean }>()`
  - ❌ `defineProps<{ user_name: string; is_active: boolean }>()`

- **事件**: 使用 **kebab-case**
  - ✅ `@user-select="handleUserSelect"`, `@data-update="handleDataUpdate"`
  - ❌ `@userSelect="handleUserSelect"`, `@dataUpdate="handleDataUpdate"`

- **属性**: 使用 **kebab-case**
  - ✅ `<input :max-length="50" :is-disabled="true" />`
  - ❌ `<input :maxLength="50" :isDisabled="true" />`

## Composables 命名

- **Use 前缀**: 使用 **camelCase** 且以 `use` 开头
  - ✅ `useUserData()`, `useApiRequest()`, `useLocalStorage()`
  - ❌ `UseUserData()`, `getUserData()`, `user_data_composable()`

## Store 命名

- **Store 文件**: 使用 **camelCase** 且以 `Store` 结尾
  - ✅ `userStore.ts`, `appConfigStore.ts`
  - ❌ `user-store.ts`, `UserStore.ts`

- **Store 函数**: 使用 **camelCase**
  - ✅ `const useUserStore = defineStore('user', () => {})`
  - ❌ `const UseUserStore = defineStore('user', () => {})`

## API 相关命名

- **API 文件**: 使用 **camelCase** 且以 `Api` 结尾
  - ✅ `userApi.ts`, `productApi.ts`, `orderManagementApi.ts`
  - ❌ `user-api.ts`, `UserAPI.ts`

- **API 函数**: 使用 **camelCase** 且包含 HTTP 动词
  - ✅ `getUserList()`, `createUser()`, `updateUserInfo()`, `deleteUser()`
  - ❌ `get_user_list()`, `CreateUser()`, `UserDelete()`

## 特殊情况处理

- **私有成员**: 允许以 `_` 开头
  - ✅ `const _privateVar = 'internal'`, `function _helperFunction() {}`

- **Vue 特殊属性**: 允许特殊命名格式
  - ✅ `ref=""`, `v-model=""`, `@click=""`

- **第三方库属性**: 保持原有命名格式
  - ✅ `Content-Type`, `Access-Control-Allow-Origin`

- **数字属性名**: 允许纯数字
  - ✅ `{ '0': 'zero', '1': 'one' }`

## 国际化文件命名

- **语言文件**: 使用 **语言代码-国家代码** 格式
  - ✅ `en-US.ts`, `zh-CN.ts`, `ja-JP.ts`
  - ❌ `english.ts`, `chinese.ts`

## 测试文件命名

- **测试文件**: 使用 **kebab-case** 且包含 `.test.`
  - ✅ `user-service.test.ts`, `data-utils.test.ts`
  - ❌ `UserService.test.ts`, `dataUtils.test.ts`

## 自动修正建议

当检测到不符合规范的命名时，Cursor 应提供以下自动修正建议：

1. **文件重命名建议**:
   - `user-profile.vue` → `UserProfile.vue` (全局组件)
   - `UserList.vue` → `user-list.vue` (页面文件)
   - `user-api.ts` → `userApi.ts` (API 文件)

2. **变量重命名建议**:
   - `user_name` → `userName`
   - `UserName` → `userName`
   - `api_base_url` → `API_BASE_URL` (常量)

3. **函数重命名建议**:
   - `GetUserInfo` → `getUserInfo`
   - `handle_submit` → `handleSubmit`

## 配置优先级

1. 项目特定规范 (此文件)
2. ESLint 配置规则
3. TypeScript 编译器检查
4. Vue 官方推荐规范

---
