---
description: CC-Admin 项目编码规范和 Cursor 自动编码规则
globs: ['**/*.{ts,tsx,vue,js,jsx}']
alwaysApply: true
---

# CC-Admin 项目编码规范和 Cursor 自动编码规则

此文件为 Cursor 编辑器提供完整的编码规范指导，严格遵循项目的 TypeScript 和 ESLint 配置。

## 项目配置遵循

### TypeScript 配置遵循

- **路径别名**: 严格使用 `@/*`, `@!/*`, `@#/*` 路径别名
- **模块解析**: 遵循 `tsconfig.json` 中的路径映射
- **类型检查**: 启用严格模式，遵循所有 TypeScript 规则

### ESLint 配置遵循

- **命名规范**: 严格遵循 `@typescript-eslint/naming-convention` 规则
- **代码质量**: 遵循所有 ESLint 推荐规则
- **Vue 规范**: 遵循 Vue 官方和项目自定义规则

## 变量声明规范

### 变量命名 (camelCase)

```typescript
// ✅ 正确
const userName = 'admin'
const userList = []
const isLoading = false
const apiResponse = {}

// ❌ 错误
const user_name = 'admin'
const UserName = 'admin'
const user-list = []
```

### 常量命名 (SCREAMING_SNAKE_CASE)

```typescript
// ✅ 正确
const API_BASE_URL = 'https://api.example.com'
const MAX_FILE_SIZE = 1024
const DEFAULT_TIMEOUT = 5000

// ❌ 错误
const apiBaseUrl = 'https://api.example.com'
const maxFileSize = 1024
```

### 函数命名 (camelCase)

```typescript
// ✅ 正确
function getUserInfo() {}
const handleSubmit = () => {}
const fetchUserData = async () => {}

// ❌ 错误
function GetUserInfo() {}
const handle_submit = () => {}
const FetchUserData = async () => {}
```

### 类型/接口命名 (PascalCase)

```typescript
// ✅ 正确
interface UserInfo {}
type ApiResponse<T> = {}
enum UserStatus {
  Active,
  Inactive,
}

// ❌ 错误
interface userInfo {}
type apiResponse<T> = {}
enum userStatus {
  active,
  inactive,
}
```

## 导入导出规范

### 路径别名使用

```typescript
// ✅ 正确：使用路径别名
import { formatDate } from '@/utils'
import { getUserApi } from '@!/index'
import { deepClone } from '@#/index'

// ❌ 错误：使用相对路径
import { formatDate } from '../../../utils'
import { getUserApi } from '../../api'
```

### 导入顺序

```typescript
// 1. Vue 相关导入
import { ref, reactive, computed, onMounted } from 'vue'

// 2. 第三方库导入
import { Button } from 'primevue/button'
import { debounce } from 'lodash-es'

// 3. 项目内部导入 (按路径别名分组)
import { useUserStore } from '@/stores'
import { formatDate } from '@/utils'
import { getUserApi } from '@!/index'
import { deepClone } from '@#/index'

// 4. 类型导入
import type { UserInfo, ApiResponse } from '@/types'

// 5. 相对路径导入
import LocalComponent from './LocalComponent.vue'
```

### 具名导入优先

```typescript
// ✅ 正确：具名导入
import { debounce, throttle } from '@/utils'
import { format } from 'date-fns'

// ❌ 错误：默认导入
import utils from '@/utils'
import * as dateFns from 'date-fns'
```

## Vue 组件规范

### 组件命名 (PascalCase)

```vue
<!-- ✅ 正确 -->
<UserProfile />
<DataTable />
<FormModal />

<!-- ❌ 错误 -->
<user-profile />
<dataTable />
```

### Props 命名 (camelCase)

```typescript
// ✅ 正确
defineProps<{
  userName: string
  isActive: boolean
  userList: UserInfo[]
}>()

// ❌ 错误
defineProps<{
  user_name: string
  is_active: boolean
  user_list: UserInfo[]
}>()
```

### 事件命名 (kebab-case)

```vue
<!-- ✅ 正确 -->
@user-select="handleUserSelect" @data-update="handleDataUpdate"

<!-- ❌ 错误 -->
@userSelect="handleUserSelect" @dataUpdate="handleDataUpdate"
```

### 属性命名 (kebab-case)

```vue
<!-- ✅ 正确 -->
<input :max-length="50" :is-disabled="true" />

<!-- ❌ 错误 -->
<input :maxLength="50" :isDisabled="true" />
```

## Composables 规范

### 命名规范

```typescript
// ✅ 正确：以 use 开头，camelCase
const useUserData = () => {}
const useApiRequest = () => {}
const useLocalStorage = () => {}

// ❌ 错误
const UseUserData = () => {}
const getUserData = () => {}
const user_data_composable = () => {}
```

### 返回值规范

```typescript
// ✅ 正确：返回响应式对象
const useUserData = () => {
  const user = ref<UserInfo | null>(null)
  const loading = ref(false)

  const fetchUser = async () => {
    loading.value = true
    // ...
  }

  return {
    user: readonly(user),
    loading: readonly(loading),
    fetchUser,
  }
}
```

## Store 规范

### 文件命名

```typescript
// ✅ 正确：camelCase + Store 后缀
// userStore.ts
const useUserStore = defineStore('user', () => {
  // ...
})

// ❌ 错误
// user-store.ts, UserStore.ts
```

### Store 函数命名

```typescript
// ✅ 正确：camelCase
const useUserStore = defineStore('user', () => {
  const user = ref<UserInfo | null>(null)

  const fetchUser = async () => {}
  const updateUser = async (data: Partial<UserInfo>) => {}

  return { user, fetchUser, updateUser }
})
```

## API 规范

### 文件命名

```typescript
// ✅ 正确：camelCase + Api 后缀
// userApi.ts, productApi.ts

// ❌ 错误
// user-api.ts, UserAPI.ts
```

### 函数命名

```typescript
// ✅ 正确：camelCase + HTTP 动词
const getUserList = async () => {}
const createUser = async (data: CreateUserData) => {}
const updateUserInfo = async (id: string, data: UpdateUserData) => {}
const deleteUser = async (id: string) => {}

// ❌ 错误
const get_user_list = async () => {}
const CreateUser = async () => {}
const UserDelete = async () => {}
```

## 错误处理规范

### 异常处理

```typescript
// ✅ 正确：使用 try-catch
const fetchUserData = async () => {
  try {
    const response = await getUserApi()
    return response.data
  } catch (error) {
    console.error('获取用户数据失败:', error)
    throw error
  }
}

// ❌ 错误：忽略错误
const fetchUserData = async () => {
  const response = await getUserApi()
  return response.data
}
```

### 类型安全

```typescript
// ✅ 正确：类型断言和类型守卫
const processUserData = (data: unknown) => {
  if (isUserInfo(data)) {
    return data.name
  }
  throw new Error('Invalid user data')
}

// ❌ 错误：任意类型
const processUserData = (data: any) => {
  return data.name
}
```

## 代码质量规范

### 严格相等

```typescript
// ✅ 正确：使用 ===
if (user.status === 'active') {
}
if (count !== 0) {
}

// ❌ 错误：使用 ==
if (user.status == 'active') {
}
if (count != 0) {
}
```

### 条件语句

```typescript
// ✅ 正确：使用大括号
if (condition) {
  doSomething()
}

// ❌ 错误：省略大括号
if (condition) doSomething()
```

### 变量声明

```typescript
// ✅ 正确：使用 const/let
const userName = 'admin'
let isLoading = false

// ❌ 错误：使用 var
var userName = 'admin'
```

## 注释规范

### 函数注释

```typescript
/**
 * 获取用户信息
 * @param userId 用户ID
 * @returns Promise<UserInfo> 用户信息
 */
const getUserInfo = async (userId: string): Promise<UserInfo> => {
  // 实现逻辑
}
```

### 复杂逻辑注释

```typescript
// 计算用户活跃度分数
// 基于登录频率、操作次数、在线时长等因素
const calculateUserActivity = (user: UserInfo) => {
  // 实现逻辑
}
```

## 性能优化规范

### 响应式优化

```typescript
// ✅ 正确：使用 shallowRef 和 shallowReactive
const largeList = shallowRef<LargeItem[]>([])
const config = shallowReactive<Config>({})

// ✅ 正确：使用 readonly
const userStore = useUserStore()
const { user } = storeToRefs(userStore)
```

### 计算属性优化

```typescript
// ✅ 正确：缓存计算结果
const expensiveValue = computed(() => {
  return heavyCalculation(data.value)
})
```

## 国际化规范

### 文本处理

```typescript
// ✅ 正确：使用 t 函数
const title = t('user.management.title')
const message = t('welcome.message', { name: userName })

// ❌ 错误：硬编码文本
const title = '用户管理'
const message = `欢迎, ${userName}`
```

## 自动编码规则

### Cursor Tab 行为

1. **自动补全变量名**: 遵循 camelCase 规范
2. **自动导入**: 优先使用路径别名
3. **类型推断**: 自动添加类型注解
4. **错误修复**: 自动修复 ESLint 错误

### 代码生成模板

```typescript
// 输入: "create user composable"
// 自动生成:
const useUser = () => {
  const user = ref<UserInfo | null>(null)
  const loading = ref(false)

  const fetchUser = async (id: string) => {
    loading.value = true
    try {
      const response = await getUserApi(id)
      user.value = response.data
    } catch (error) {
      console.error('获取用户失败:', error)
      throw error
    } finally {
      loading.value = false
    }
  }

  return {
    user: readonly(user),
    loading: readonly(loading),
    fetchUser,
  }
}
```

## 禁止事项

### 严格禁止

1. **使用 any 类型** (除非必要)
2. **使用 var 声明变量**
3. **使用 == 进行比较**
4. **硬编码文本** (应使用国际化)
5. **相对路径导入** (应使用路径别名)
6. **默认导入整个模块** (应使用具名导入)

### 代码审查检查点

1. 命名规范是否符合项目标准
2. 导入路径是否使用别名
3. 类型定义是否完整
4. 错误处理是否完善
5. 性能优化是否到位

---

**注意**: 此规范严格遵循项目的 TypeScript 和 ESLint 配置，确保代码质量和一致性。所有自动生成的代码都必须符合这些规范。
