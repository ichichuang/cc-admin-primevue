---
description: Cursor 自动补全和智能提示配置
globs: ['**/*.{ts,tsx,vue,js,jsx}']
alwaysApply: true
---

# Cursor 自动补全和智能提示配置

此文件为 Cursor 编辑器提供智能的自动补全规则，确保生成的代码符合项目规范。

## 智能补全规则

### 变量声明自动补全

```typescript
// 输入: "const user" -> 自动补全为 "const userName = "
// 输入: "const api" -> 自动补全为 "const apiResponse = "
// 输入: "const is" -> 自动补全为 "const isLoading = "
// 输入: "const has" -> 自动补全为 "const hasPermission = "
// 输入: "const can" -> 自动补全为 "const canEdit = "
```

### 函数声明自动补全

```typescript
// 输入: "function get" -> 自动补全为 "function getUserInfo() {}"
// 输入: "function fetch" -> 自动补全为 "function fetchUserData() {}"
// 输入: "function handle" -> 自动补全为 "function handleSubmit() {}"
// 输入: "function validate" -> 自动补全为 "function validateForm() {}"
// 输入: "function process" -> 自动补全为 "function processData() {}"
```

### 箭头函数自动补全

```typescript
// 输入: "const get" -> 自动补全为 "const getUserInfo = () => {}"
// 输入: "const handle" -> 自动补全为 "const handleSubmit = () => {}"
// 输入: "const fetch" -> 自动补全为 "const fetchUserData = async () => {}"
// 输入: "const update" -> 自动补全为 "const updateUserInfo = async () => {}"
```

## 类型自动补全

### 接口自动补全

```typescript
// 输入: "interface User" -> 自动补全为 "interface UserInfo {}"
// 输入: "interface Api" -> 自动补全为 "interface ApiResponse<T> {}"
// 输入: "interface Form" -> 自动补全为 "interface FormData {}"
// 输入: "interface Config" -> 自动补全为 "interface AppConfig {}"
```

### 类型别名自动补全

```typescript
// 输入: "type User" -> 自动补全为 "type UserRole = 'admin' | 'user' | 'guest'"
// 输入: "type Status" -> 自动补全为 "type UserStatus = 'active' | 'inactive' | 'pending'"
// 输入: "type Event" -> 自动补全为 "type EventHandler<T> = (event: T) => void"
```

### 枚举自动补全

```typescript
// 输入: "enum Status" -> 自动补全为 "enum UserStatus { Active = 'active', Inactive = 'inactive' }"
// 输入: "enum Role" -> 自动补全为 "enum UserRole { Admin = 'admin', User = 'user', Guest = 'guest' }"
// 输入: "enum Method" -> 自动补全为 "enum HttpMethod { GET = 'GET', POST = 'POST', PUT = 'PUT', DELETE = 'DELETE' }"
```

## 导入自动补全

### 路径别名自动补全

```typescript
// 输入: "useUserStore" -> 自动添加 "import { useUserStore } from '@/stores'"
// 输入: "formatDate" -> 自动添加 "import { formatDate } from '@/utils'"
// 输入: "getUserApi" -> 自动添加 "import { getUserApi } from '@!/index'"
// 输入: "deepClone" -> 自动添加 "import { deepClone } from '@#/index'"
// 输入: "Button" -> 自动添加 "import { Button } from 'primevue/button'"
```

### 类型导入自动补全

```typescript
// 输入: "UserInfo" -> 自动添加 "import type { UserInfo } from '@/types'"
// 输入: "ApiResponse" -> 自动添加 "import type { ApiResponse } from '@/types'"
// 输入: "ComponentProps" -> 自动添加 "import type { ComponentProps } from '@/types'"
```

## Vue 组件自动补全

### 组件 Props 自动补全

```typescript
// 输入: "defineProps" -> 自动补全为:
const props = withDefaults(
  defineProps<{
    // 根据上下文自动推断 Props 类型
  }>(),
  {
    // 默认值
  }
)

// 输入: "UserCardProps" -> 自动补全为:
interface UserCardProps {
  user: UserInfo
  showActions?: boolean
  onEdit?: (user: UserInfo) => void
  onDelete?: (userId: string) => void
}
```

### 组件 Emits 自动补全

```typescript
// 输入: "defineEmits" -> 自动补全为:
const emit = defineEmits<{
  // 根据上下文自动推断事件类型
}>()

// 输入: "UserCardEmits" -> 自动补全为:
interface UserCardEmits {
  edit: [user: UserInfo]
  delete: [userId: string]
  update: [user: UserInfo]
}
```

### 响应式数据自动补全

```typescript
// 输入: "const user" -> 自动补全为 "const user = ref<UserInfo | null>(null)"
// 输入: "const loading" -> 自动补全为 "const loading = ref<boolean>(false)"
// 输入: "const userList" -> 自动补全为 "const userList = ref<UserInfo[]>([])"
// 输入: "const formData" -> 自动补全为 "const formData = reactive<Partial<UserInfo>>({})"
```

### 计算属性自动补全

```typescript
// 输入: "const displayName" -> 自动补全为:
const displayName = computed(() => {
  return user.value ? `${user.value.firstName} ${user.value.lastName}` : '未知用户'
})

// 输入: "const isFormValid" -> 自动补全为:
const isFormValid = computed(() => {
  return formData.value.name && formData.value.email
})
```

## 方法自动补全

### 事件处理方法自动补全

```typescript
// 输入: "handleUserClick" -> 自动补全为:
const handleUserClick = (user: UserInfo) => {
  selectedUser.value = user
  emit('userSelect', user)
}

// 输入: "handleFormSubmit" -> 自动补全为:
const handleFormSubmit = async (event: Event) => {
  event.preventDefault()

  try {
    loading.value = true
    await submitForm(formData.value)
    emit('success')
  } catch (error) {
    console.error('提交失败:', error)
    emit('error', error)
  } finally {
    loading.value = false
  }
}
```

### API 方法自动补全

```typescript
// 输入: "fetchUserData" -> 自动补全为:
const fetchUserData = async (userId: string) => {
  try {
    loading.value = true
    error.value = null

    const response = await getUserApi(userId)
    user.value = response.data
  } catch (err) {
    error.value = err instanceof Error ? err.message : '获取用户失败'
    throw err
  } finally {
    loading.value = false
  }
}

// 输入: "updateUserData" -> 自动补全为:
const updateUserData = async (data: Partial<UserInfo>) => {
  if (!user.value) return

  try {
    loading.value = true
    const response = await updateUserApi(user.value.id, data)
    user.value = { ...user.value, ...response.data }
  } catch (err) {
    error.value = err instanceof Error ? err.message : '更新用户失败'
    throw err
  } finally {
    loading.value = false
  }
}
```

## 生命周期钩子自动补全

### 生命周期方法自动补全

```typescript
// 输入: "onMounted" -> 自动补全为:
onMounted(() => {
  // 组件挂载后的初始化
})

// 输入: "onUnmounted" -> 自动补全为:
onUnmounted(() => {
  // 组件卸载前的清理
})

// 输入: "watch" -> 自动补全为:
watch(
  user,
  (newUser, oldUser) => {
    // 监听用户变化
  },
  { immediate: true }
)
```

## 错误处理自动补全

### 错误处理模式自动补全

```typescript
// 输入: "try catch" -> 自动补全为:
try {
  // 业务逻辑
} catch (error) {
  console.error('操作失败:', error)
  throw error
}

// 输入: "handleApiError" -> 自动补全为:
const handleApiError = (error: unknown): string => {
  if (error instanceof ApiError) {
    return `API错误 (${error.statusCode}): ${error.message}`
  }

  if (error instanceof Error) {
    return error.message
  }

  return '未知错误'
}
```

## 代码片段模板

### 常用代码片段

```typescript
// 输入: "vcomp" -> Vue Composition API 组件模板
// 输入: "vstore" -> Vue Store 模板
// 输入: "vapi" -> Vue API 函数模板
// 输入: "vtype" -> Vue 类型定义模板
// 输入: "vtest" -> Vue 测试模板
// 输入: "vform" -> Vue 表单组件模板
// 输入: "vlist" -> Vue 列表组件模板
// 输入: "vmodal" -> Vue 模态框组件模板
```

### 组件模板自动生成

```vue
<!-- 输入: "create user component" -->
<!-- 自动生成: -->
<template lang="pug">
.user-component
  .user-header
    .user-title {{ user?.name }}
  .user-content
    .user-info
      .info-item
        .label 邮箱
        .value {{ user?.email }}
</template>

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue'
import type { UserInfo } from '@/types'

interface Props {
  userId: string
  showDetails?: boolean
}

const props = withDefaults(defineProps<Props>(), {
  showDetails: false,
})

const user = ref<UserInfo | null>(null)
const loading = ref(false)

const fetchUser = async () => {
  loading.value = true
  try {
    // 实现获取用户逻辑
  } catch (error) {
    console.error('获取用户失败:', error)
  } finally {
    loading.value = false
  }
}

onMounted(() => {
  fetchUser()
})
</script>
```

## 智能重构建议

### 自动重构规则

1. **变量重命名**: 自动建议符合 camelCase 规范的命名
2. **导入优化**: 自动使用路径别名替换相对路径
3. **类型优化**: 自动添加类型注解和类型守卫
4. **错误处理**: 自动添加 try-catch 和错误处理逻辑
5. **性能优化**: 自动使用 readonly、shallowRef 等优化

### 代码质量检查

1. **命名规范检查**: 确保符合项目命名规范
2. **导入路径检查**: 确保使用路径别名
3. **类型安全检查**: 确保类型定义完整
4. **错误处理检查**: 确保异常处理完善
5. **性能优化检查**: 确保使用最佳实践

## 上下文感知补全

### 基于上下文的智能补全

```typescript
// 在 Vue 组件中
// 输入: "const" -> 自动建议响应式变量
const user = ref<UserInfo | null>(null)
const loading = ref(false)

// 在 API 模块中
// 输入: "export const" -> 自动建议 API 函数
export const getUserList = async (): Promise<ApiResponse<UserInfo[]>> => {}

// 在 Store 中
// 输入: "const" -> 自动建议 Store 状态
const user = ref<UserInfo | null>(null)
const userList = ref<UserInfo[]>([])
```

### 智能类型推断

```typescript
// 基于使用场景自动推断类型
// 输入: "const user" -> 根据上下文推断为 UserInfo 类型
// 输入: "const api" -> 根据上下文推断为 API 相关类型
// 输入: "const form" -> 根据上下文推断为表单相关类型
```

---

**注意**: 所有自动补全都严格遵循项目的 TypeScript 和 ESLint 配置，确保生成的代码符合项目规范和质量标准。
