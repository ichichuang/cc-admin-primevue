# cc-admin UnoCSS 样式规范

## 🎨 样式方案概述

cc-admin 使用 **UnoCSS** 作为样式解决方案，提供原子化CSS + Tailwind兼容语法，实现高性能、可维护的样式系统。

### 核心特性

- **原子化CSS**: 小粒度、可复用的工具类
- **Tailwind兼容**: 使用熟悉的Tailwind语法
- **按需生成**: 只生成实际使用的样式
- **TypeScript支持**: 完整的类型提示和检查
- **主题系统**: 动态主题切换和CSS变量集成

## 🏗️ UnoCSS 配置架构

### 预设配置

```typescript
// uno.config.ts
export default defineConfig({
  presets: [
    presetUno(), // 基础工具类 (Tailwind兼容)
    presetAttributify(), // 属性化模式
    presetIcons(), // 图标系统 (@iconify/json)
    presetTypography(), // 排版预设
  ],

  // 变换器
  transformers: [
    transformerDirectives(), // @apply 指令支持
    transformerVariantGroup(), // 变体组合简化
  ],

  // 自定义规则
  rules: [
    // 自定义工具类规则
  ],

  // 快捷方式
  shortcuts: {
    // 常用组合的简化写法
  },
})
```

### 主题Token集成

```typescript
// uno.config.ts theme 配置
theme: {
  colors: {
    // 功能色系统 - 与 stores/color.ts 完全同步
    primaryColor: 'var(--primary-color)',
    successColor: 'var(--success-color)',
    warningColor: 'var(--warning-color)',
    errorColor: 'var(--error-color)',
    infoColor: 'var(--info-color)',

    // 功能色状态变体
    primaryHoverColor: 'var(--primary-hover-color)',
    successHoverColor: 'var(--success-hover-color)',
    warningHoverColor: 'var(--warning-hover-color)',
    errorHoverColor: 'var(--error-hover-color)',
    infoHoverColor: 'var(--info-hover-color)',

    primaryActiveColor: 'var(--primary-active-color)',
    successActiveColor: 'var(--success-active-color)',
    warningActiveColor: 'var(--warning-active-color)',
    errorActiveColor: 'var(--error-active-color)',
    infoActiveColor: 'var(--info-active-color)',

    primaryDisabledColor: 'var(--primary-disabled-color)',
    successDisabledColor: 'var(--success-disabled-color)',
    warningDisabledColor: 'var(--warning-disabled-color)',
    errorDisabledColor: 'var(--error-disabled-color)',
    infoDisabledColor: 'var(--info-disabled-color)',

    primaryLightColor: 'var(--primary-light-color)',
    successLightColor: 'var(--success-light-color)',
    warningLightColor: 'var(--warning-light-color)',
    errorLightColor: 'var(--error-light-color)',
    infoLightColor: 'var(--info-light-color)',

    // 主题色系统
    primary100: 'var(--primary100)', // 主色深色调
    primary200: 'var(--primary200)', // 主色中色调
    primary300: 'var(--primary300)', // 主色浅色调

    // 强调色系统
    accent100: 'var(--accent100)', // 强调色主色调
    accent200: 'var(--accent200)', // 强调色深色调

    // 文本色系统
    text100: 'var(--text100)', // 主文本色
    text200: 'var(--text200)', // 次文本色

    // 背景色系统
    bg100: 'var(--bg100)', // 主背景色
    bg200: 'var(--bg200)', // 次背景色
    bg300: 'var(--bg300)', // 边界背景色
  },

  // 尺寸系统（与 stores/size.ts 同步）
  sizes: {
    // 布局尺寸
    sidebarWidth: 'var(--sidebar-width)',
    sidebarCollapsedWidth: 'var(--sidebar-collapsed-width)',
    headerHeight: 'var(--header-height)',
    breadcrumbHeight: 'var(--breadcrumb-height)',
    footerHeight: 'var(--footer-height)',
    tabsHeight: 'var(--tabs-height)',
    contentHeight: 'var(--content-height)',
    contentsHeight: 'var(--contents-height)',

    // 间距系统
    gap: 'var(--gap)', // 标准间距
    gaps: 'var(--gaps)', // 小间距（gap的一半）

    // 圆角系统
    rounded: 'var(--rounded)', // 动态圆角
  }
}
```

## 📝 样式编写规范

### 基础工具类使用

```vue
<template>
  <!-- ✅ 正确：使用原子化类名 -->
  <div class="flex items-center justify-between p-gap bg-bg100 rounded shadow-sm">
    <h1 class="text-title text-text100">标题</h1>
    <button class="btn-primary">操作按钮</button>
  </div>

  <!-- ✅ 正确：响应式设计 -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-gap">
    <div class="card">卡片内容</div>
  </div>

  <!-- ✅ 正确：状态变体 -->
  <button
    class="btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
    :disabled="isLoading"
  >
    <span
      v-if="isLoading"
      class="inline-block animate-spin mr-gaps"
      >⏳</span
    >
    提交
  </button>
</template>
```

### 主题色系统使用

```vue
<template>
  <!-- ✅ 正确：使用功能色系统 -->
  <div class="bg-primaryColor text-primaryLightColor hover:bg-primaryHoverColor">主色按钮</div>

  <!-- ✅ 正确：使用主题色层级 -->
  <header class="bg-primary100 text-text100">
    <nav class="bg-primary200">导航</nav>
  </header>

  <!-- ✅ 正确：使用背景色系统 -->
  <main class="bg-bg100">
    <section class="bg-bg200 border border-bg300">
      <p class="text-text100">主要文本</p>
      <small class="text-text200">次要文本</small>
    </section>
  </main>

  <!-- ✅ 正确：状态色使用 -->
  <div class="bg-successColor text-successLightColor">成功状态</div>
  <div class="bg-warningColor text-warningLightColor">警告状态</div>
  <div class="bg-errorColor text-errorLightColor">错误状态</div>
  <div class="bg-infoColor text-infoLightColor">信息状态</div>
</template>
```

### 尺寸系统使用

```vue
<template>
  <!-- ✅ 正确：使用布局尺寸 -->
  <aside class="w-sidebarWidth bg-bg200">
    <!-- 侧边栏内容 -->
  </aside>

  <header class="h-headerHeight bg-primary100">
    <!-- 头部内容 -->
  </header>

  <!-- ✅ 正确：使用间距系统 -->
  <div class="p-gap m-gaps">
    <div class="space-y-gaps">
      <p>段落1</p>
      <p>段落2</p>
    </div>
  </div>

  <!-- ✅ 正确：使用圆角系统 -->
  <div class="rounded bg-bg200 border border-bg300">
    <button class="rounded bg-primaryColor text-primaryLightColor">按钮</button>
  </div>
</template>
```

### 变体组合简化

```vue
<template>
  <!-- ✅ 正确：使用变体组合 -->
  <div class="hover:(bg-bg200 shadow-md) focus:(outline-none ring-2 ring-primaryColor)">
    可交互元素
  </div>

  <!-- ✅ 正确：深色模式变体 -->
  <div class="bg-bg100 text-text100 dark:(bg-bg200 text-text200)">自适应主题的内容</div>

  <!-- ✅ 正确：响应式变体组合 -->
  <div class="text-(sm text200) md:text-(base text100) lg:text-(lg text100)">响应式文本</div>
</template>
```

### 属性化模式

```vue
<template>
  <!-- ✅ 正确：使用属性化语法（复杂样式时推荐） -->
  <div
    flex="~ col items-center justify-center"
    p="x-gap y-gaps"
    bg="bg100"
    border="~ rounded bg300"
    text="center lg text100"
  >
    属性化样式内容
  </div>

  <!-- ✅ 正确：动态属性化 -->
  <div
    :class="[
      'transition-slow',
      isActive ? 'bg-primaryColor text-primaryLightColor' : 'bg-bg200 text-text100',
    ]"
  >
    动态样式
  </div>
</template>
```

## 🎭 主题系统集成

### 动态主题切换

```vue
<template>
  <!-- ✅ 正确：响应主题变化的组件 -->
  <div class="bg-bg100 text-text100 transition-slow">
    <header class="bg-primary100 text-primaryLightColor">
      <h1 class="text-title">主题自适应标题</h1>
    </header>

    <main class="bg-bg200 p-gap">
      <div class="card">
        <p class="text-body text-text100">主要内容</p>
        <small class="text-caption text-text200">次要信息</small>
      </div>
    </main>
  </div>
</template>

<script setup lang="ts">
import { useColorStore, useSizeStore } from '@/stores'

// ✅ 正确：响应主题和尺寸变化
const colorStore = useColorStore()
const sizeStore = useSizeStore()

// 主题模式切换
const toggleTheme = () => {
  colorStore.toggleMode()
}

// 切换尺寸模式
const toggleSize = () => {
  const sizes = ['compact', 'comfortable', 'loose'] as const
  const currentIndex = sizes.indexOf(sizeStore.size)
  const nextIndex = (currentIndex + 1) % sizes.length
  sizeStore.setSize(sizes[nextIndex])
}
</script>
```

## 📱 响应式设计

### 断点系统

```vue
<template>
  <!-- ✅ 正确：移动优先的响应式设计 -->
  <div
    class="
    w-full
    sm:w-1/2
    md:w-1/3
    lg:w-1/4
    xl:w-1/5
    p-gaps
    sm:p-gap
    md:p-gap
    lg:p-gap
  "
  >
    响应式卡片
  </div>

  <!-- ✅ 正确：复杂响应式布局 -->
  <div
    class="
    flex flex-col
    sm:flex-row
    gap-gaps
    sm:gap-gap
    lg:gap-gap
  "
  >
    <aside class="w-full sm:w-sidebarWidth lg:w-sidebarWidth">侧边栏</aside>
    <main class="flex-1 min-w-0">主内容</main>
  </div>
</template>
```

## 🎨 组件样式模式

### 基础组件样式

```vue
<!-- UserCard.vue -->
<template>
  <div class="user-card">
    <img
      class="user-card-avatar"
      :src="avatar"
      :alt="name"
    />
    <h3 class="user-card-title">{{ name }}</h3>
    <p class="user-card-description">{{ description }}</p>
  </div>
</template>

<style>
/* ✅ 正确：使用 @apply 组合工具类 */
.user-card {
  @apply card hover:shadow-xl transition-slow;
}

.user-card-avatar {
  @apply w-12 h-12 rounded-full object-cover mb-gaps;
}

.user-card-title {
  @apply text-title text-text100 mb-gaps;
}

.user-card-description {
  @apply text-body text-text200 line-clamp-2;
}
</style>
```

### 复杂组件样式

```vue
<!-- DataTable.vue -->
<template>
  <div class="data-table-container">
    <table class="data-table">
      <thead class="data-table-header">
        <tr>
          <th class="data-table-header-cell">列标题</th>
        </tr>
      </thead>
      <tbody class="data-table-body">
        <tr class="data-table-row">
          <td class="data-table-cell">单元格</td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<style>
/* ✅ 正确：表格样式系统 */
.data-table-container {
  @apply overflow-x-auto bg-bg100 rounded border border-bg300;
}

.data-table {
  @apply w-full border-collapse;
}

.data-table-header {
  @apply bg-bg200;
}

.data-table-header-cell {
  @apply px-gap py-gaps text-left text-xs font-medium
    text-text200 uppercase tracking-wider
    border-b border-bg300;
}

.data-table-row {
  @apply border-b border-bg300 hover:bg-bg200/50 transition-fast;
}

.data-table-cell {
  @apply px-gap py-gaps whitespace-nowrap text-sm text-text100;
}
</style>
```

## 🔧 自定义工具类和快捷方式

### 快捷方式定义

```typescript
// uno.config.ts shortcuts
shortcuts: [
  {
    // 基础边框
    border: 'border-1 border-solid border-bg300',
    'border-primary': 'border-1 border-solid border-primaryColor',
    'border-success': 'border-1 border-solid border-successColor',
    'border-warning': 'border-1 border-solid border-warningColor',
    'border-error': 'border-1 border-solid border-errorColor',
    'border-info': 'border-1 border-solid border-infoColor',

    // 圆角
    rounded: 'rounded-rounded',
  },

  // 布局快捷方式
  {
    full: 'w-full h-full',
    container: 'w-full h-full bg-bg100 color-text100',
    center: 'flex items-center justify-center',
    between: 'flex items-center justify-between',
    'center-col': 'flex flex-col items-center justify-center',
  },

  // 文本快捷方式
  {
    'text-title': 'text-xl font-bold text-text100',
    'text-subtitle': 'text-lg font-medium text-text100',
    'text-body': 'text-base text-text100',
    'text-caption': 'text-sm text-text200',
    'text-muted': 'text-sm text-text200',
  },

  // 按钮快捷方式
  {
    btn: 'inline-flex center px-gap py-gaps mx-gaps rounded transition-slow focus:outline-none focus:ring-2 focus:ring-offset-2 cursor-pointer',
    'btn-primary':
      'btn bg-primaryColor color-primaryLightColor hover:bg-primaryHoverColor focus:ring-primaryColor active:bg-primaryActiveColor disabled:bg-primaryDisabledColor',
    'btn-success':
      'btn bg-successColor color-successLightColor hover:bg-successHoverColor focus:ring-successColor active:bg-successActiveColor disabled:bg-successDisabledColor',
    'btn-outline-primary':
      'btn border border-primaryColor text-primaryColor bg-transparent hover:bg-primaryLightColor focus:ring-primaryColor',
  },

  // 卡片快捷方式
  {
    card: 'bg-bg100 border border-bg300 rounded p-gap hover:shadow-lg shadow-bg300/20 transition-slow',
    'card-hover': 'card hover:shadow-xl hover:border-bg200',
    'card-active': 'card border-primary200 shadow-lg shadow-primary300/30',
  },

  // 输入框快捷方式
  {
    'input-base':
      'w-full px-gap py-gaps border border-bg300 rounded bg-bg100 text-text100 placeholder:text-text200 focus:outline-none focus:ring-2 focus:ring-primaryColor focus:border-primaryColor transition-slow',
  },
]
```

## ⚠️ 样式规范约束

### 避免的写法

```vue
<template>
  <!-- ❌ 错误：内联样式（除非必要的动态值） -->
  <div style="color: red; font-size: 16px;">错误示例</div>

  <!-- ❌ 错误：硬编码颜色（应使用主题变量） -->
  <div class="bg-[#3b82f6]">硬编码颜色</div>

  <!-- ❌ 错误：不使用主题系统 -->
  <div class="bg-gray-100 text-gray-900">非主题色</div>

  <!-- ❌ 错误：重复的复杂样式组合 -->
  <div
    class="flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
  >
    重复样式1
  </div>
</template>
```

### 推荐的写法

```vue
<template>
  <!-- ✅ 正确：使用主题变量 -->
  <div class="bg-primaryColor text-primaryLightColor">主题色背景</div>

  <!-- ✅ 正确：使用快捷方式 -->
  <button class="btn-primary">操作按钮1</button>
  <button class="btn-primary">操作按钮2</button>

  <!-- ✅ 正确：使用主题系统 -->
  <div class="bg-bg100 text-text100 border border-bg300">主题自适应内容</div>

  <!-- ✅ 正确：合理的任意值使用 -->
  <div class="w-[calc(100%-2rem)] max-w-[1200px]">响应式容器</div>
</template>
```

## 📈 性能优化

### 样式优化策略

```typescript
// ✅ 正确：按需生成配置
export default defineConfig({
  // 只扫描实际使用的文件
  content: ['./src/**/*.{vue,js,ts,jsx,tsx}', './index.html'],

  // 安全列表 - 确保主题相关类名被包含
  safelist: [
    // 功能色相关
    'text-primaryColor',
    'bg-primaryColor',
    'border-primaryColor',
    'text-successColor',
    'bg-successColor',
    'border-successColor',
    'text-warningColor',
    'bg-warningColor',
    'border-warningColor',
    'text-errorColor',
    'bg-errorColor',
    'border-errorColor',
    'text-infoColor',
    'bg-infoColor',
    'border-infoColor',

    // 主题色相关
    'bg-primary100',
    'bg-primary200',
    'bg-primary300',
    'text-text100',
    'text-text200',
    'bg-bg100',
    'bg-bg200',
    'bg-bg300',
  ],

  // 生产环境优化
  minify: process.env.NODE_ENV === 'production',
})
```

### 运行时性能

```vue
<script setup lang="ts">
// ✅ 正确：样式计算缓存
const buttonClass = computed(() => [
  'btn',
  props.variant === 'primary' ? 'btn-primary' : 'btn-default',
  props.size === 'large' ? 'px-gap py-gap' : 'px-gaps py-gaps',
  props.disabled && 'disabled',
])

// ✅ 正确：主题响应式计算
const themeClass = computed(() => {
  const colorStore = useColorStore()
  return {
    'bg-bg100': true,
    'text-text100': true,
    dark: colorStore.isDark,
  }
})
</script>

<template>
  <!-- ✅ 正确：使用计算属性避免重复计算 -->
  <button :class="buttonClass">
    {{ props.label }}
  </button>

  <div :class="themeClass">主题响应内容</div>
</template>
```

## 📚 最佳实践总结

1. **优先使用主题系统**: 始终使用 `bg-bg100`、`text-text100` 等主题变量，而非硬编码颜色
2. **合理使用快捷方式**: 使用 `btn-primary`、`card`、`input-base` 等预定义快捷方式
3. **响应式设计**: 移动优先，合理使用断点系统
4. **状态管理**: 充分利用 hover、focus、active、disabled 等状态变体
5. **性能优化**: 使用计算属性缓存样式计算，避免重复渲染
6. **可维护性**: 保持样式的模块化和一致性，便于主题切换和维护

遵循这些UnoCSS样式规范，确保cc-admin项目具有一致的视觉效果、优秀的性能表现和良好的维护性。
