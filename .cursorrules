# cc-admin-PrimeVue 项目 Cursor 配置

## 🚀 包管理器配置
**强制使用 pnpm 作为包管理器！**

### 项目配置
- `package.json`: `"packageManager": "pnpm@10.12.4"`
- `package.json`: `"engines": { "node": ">=22.x", "pnpm": ">=8.0.0" }`
- `.cursor/settings.json`: `"npm.packageManager": "pnpm"`

### 运行命令
- 开发服务器: `pnpm dev`
- 构建项目: `pnpm build`
- 安装依赖: `pnpm install`
- 代码检查: `pnpm lint`
- 类型检查: `pnpm type-check`
- 格式化代码: `pnpm format`

### 禁止使用的命令
- ❌ `npm install`
- ❌ `npm run dev`
- ❌ `yarn install`
- ❌ `yarn dev`

## 🏗️ 技术栈
- **前端框架**: Vue 3.5+ (Composition API)
- **语言**: TypeScript 5+ (严格模式)
- **构建工具**: Vite 7+
- **状态管理**: Pinia + pinia-plugin-persistedstate
- **路由**: Vue Router 4+
- **HTTP客户端**: Alova
- **样式方案**: UnoCSS (原子化CSS + Tailwind兼容)
- **代码规范**: ESLint 9+ + Prettier + TypeScript ESLint
- **提交规范**: Commitizen + Commitlint (Conventional Commits)
- **包管理**: pnpm 10.12.4

## 📁 目录结构
```
src/
├── api/              # API 接口
├── stores/           # Pinia 状态管理
├── router/           # Vue Router 路由
├── hooks/            # 组合式函数
├── common/           # 公共模块
├── layouts/          # 布局组件
├── views/            # 页面组件
├── utils/            # 工具函数
├── types/            # TypeScript 类型定义
├── locales/          # 国际化
├── assets/           # 静态资源
└── plugins/          # 插件配置
```

## 🎨 样式系统 (UnoCSS)
- **原子化CSS**: 使用UnoCSS，兼容Tailwind语法
- **主题系统**: 支持深色/浅色模式 + 动态主题颜色
- **图标系统**: @iconify/json 图标集合
- **配置文件**: `uno.config.ts`

## 📝 命名约定
### 文件命名
- **Vue页面**: kebab-case (`user-list.vue`)
- **Vue组件**: PascalCase (`UserCard.vue`)
- **TypeScript文件**: camelCase (`userService.ts`)
- **目录**: kebab-case (`user-management/`)

### 代码命名
- **变量/函数**: camelCase (`getUserList`)
- **常量**: SCREAMING_SNAKE_CASE (`MAX_RETRY_COUNT`)
- **接口/类型**: PascalCase (`UserInfo`, `ApiResponse`)
- **组件名**: 多词组合 PascalCase (`UserCard`, `DataTable`)
- **事件处理**: handle前缀 (`handleSubmit`, `handleClick`)
- **Composable**: use前缀 (`useUserStore`, `useTheme`)

## 🧩 Vue 3 开发规范
### Composition API
- **优先使用** Composition API 而非 Options API
- **script setup** 语法糖优先
- **响应式**: 使用 `ref`、`reactive`、`computed`、`watch`
- **生命周期**: 使用 `onMounted`、`onUnmounted` 等组合式生命周期

### 组件设计
- **单文件组件**: `.vue` 文件包含 template、script、style
- **Props类型**: 必须定义 TypeScript 类型
- **事件定义**: 使用 `defineEmits` 定义事件类型
- **插槽使用**: 合理使用具名插槽和作用域插槽
- **组件通信**: Props down, Events up 原则

### TypeScript 集成
- **严格模式**: 启用 `strict: true`
- **类型导入**: 使用 `import type` 导入纯类型
- **接口定义**: 业务数据类型必须定义接口
- **泛型使用**: 合理使用泛型提高代码复用性

## 🔧 开发工具配置
### ESLint + Prettier
- **ESLint**: 代码质量检查，使用 `@eslint/js` 和 `typescript-eslint`
- **Prettier**: 代码格式化，统一代码风格
- **Vue规则**: 使用 `eslint-plugin-vue` 检查Vue组件
- **保存时**: 自动修复ESLint错误和格式化代码
- **Git Hooks**: 提交前自动检查代码质量

## 🚀 常用开发命令
```bash
# 开发服务器
pnpm dev

# 构建项目
pnpm build

# 构建分析
pnpm build:analyze

# 代码检查
pnpm lint              # ESLint检查和修复
pnpm type-check        # TypeScript类型检查
pnpm naming-check      # 命名规范检查
pnpm check             # 综合代码检查

# 代码格式化
pnpm format            # Prettier格式化
pnpm fix               # ESLint修复 + 格式化

# Git提交
pnpm commit            # 使用Commitizen规范提交
```

## 🎯 开发最佳实践
### 性能优化
- **按需导入**: 组件、工具函数按需导入
- **代码分割**: 路由级别的代码分割
- **图片优化**: 使用合适格式和尺寸的图片
- **Bundle分析**: 使用 `pnpm build:analyze` 分析打包结果

### 可维护性
- **模块化设计**: 功能模块独立，低耦合高内聚
- **类型安全**: 充分利用TypeScript类型系统
- **错误处理**: 合理的错误边界和异常处理
- **文档注释**: 关键函数和复杂逻辑添加注释

### 团队协作
- **代码审查**: 提交前代码自检，PR时团队审查
- **提交规范**: 使用Conventional Commits格式
- **分支管理**: 功能分支开发，合并前测试
- **依赖管理**: 及时更新依赖，避免安全漏洞

## 🔒 强制执行规则
1. **包管理器**: 必须使用pnpm，禁止npm/yarn
2. **代码规范**: Git提交前强制检查ESLint、TypeScript、命名规范
3. **类型安全**: 所有公共API和组件Props必须定义类型
4. **目录结构**: 新增模块必须遵循既定的目录结构
5. **提交信息**: 必须使用Commitizen生成规范的提交信息

## 🚫 开发阶段文档限制

### 📝 开发重点
- **专注功能实现**：优先完成核心功能代码，确保代码质量和性能
- **实现完整业务逻辑**：确保每个功能模块完整可用
- **遵循最佳实践**：使用 TypeScript 和 Vue 3 最佳实践
- **性能优化**：注意内存使用和渲染性能
- **兼容性**：确保在不同设备和浏览器上的兼容性

### ❌ 开发阶段不需要的工作
- **不创建文档**：不创建 `docs/` 目录下的文档
- **不编写说明**：不编写 README 说明
- **不添加示例注释**：不添加详细的使用说明和示例注释
- **不创建教程**：不创建示例和教程

### ✅ 开发阶段需要保留的
- **必要注释**：保留必要的代码注释（解释复杂逻辑）
- **JSDoc注释**：保留函数和类的 JSDoc 注释
- **清晰命名**：使用清晰的英文文件命名
- **规范遵循**：遵循项目现有的命名规范

### 🎯 当前开发重点
1. 完善 rem 适配系统的边界逻辑
2. 优化配置管理的一致性
3. 实现其他核心功能模块
4. 确保代码质量和性能

### 📚 文档策略
等框架完全完善后，会单独编写完整的文档体系，包括：
- 框架架构文档
- API 参考文档
- 使用教程和最佳实践
- 示例代码库

这样可以确保开发效率，避免在开发过程中分散精力编写文档。

> **重要**: 在开发阶段，AI助手应该专注于功能实现，不要主动创建文档或编写使用说明。
